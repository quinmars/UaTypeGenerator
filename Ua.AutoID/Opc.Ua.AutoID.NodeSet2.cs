// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated
// </auto-generated>
// ------------------------------------------------------------------------------

namespace Ua.AutoID
{
    // Ideally this should go into Workstation.UaClient
    public interface IOptionalFields
    {
        int OptionalFieldCount { get; }
        uint EncodingMask { get; }
    }
    
    /// <summary>
    /// The AutoIdOperationStatusEnumeration enumeration.
    /// </summary>
    /// <seealso href="https://reference.opcfoundation.org/v104/AutoID/v101/docs/9.2.1" />
    [Workstation.ServiceModel.Ua.DataTypeId("nsu=http://opcfoundation.org/UA/AutoID/;i=3013")]
    public enum AutoIdOperationStatusEnumeration
    {
        /// <summary>
        /// Successful operation
        /// </summary>
        SUCCESS = 0,
        /// <summary>
        /// The operation has not be executed in total.
        /// </summary>
        MISC_ERROR_TOTAL = 1,
        /// <summary>
        /// The operation has been executed only partial.
        /// </summary>
        MISC_ERROR_PARTIAL = 2,
        /// <summary>
        /// Password required
        /// </summary>
        PERMISSON_ERROR = 3,
        /// <summary>
        /// Password is wrong.
        /// </summary>
        PASSWORD_ERROR = 4,
        /// <summary>
        /// Memory region not available for the actual tag.
        /// </summary>
        REGION_NOT_FOUND_ERROR = 5,
        /// <summary>
        /// Operation not supported by the actual tag.
        /// </summary>
        OP_NOT_POSSIBLE_ERROR = 6,
        /// <summary>
        /// Addressed memory not available for the actual tag.
        /// </summary>
        OUT_OF_RANGE_ERROR = 7,
        /// <summary>
        /// The operation cannot be executed because no tag or code was inside
        /// the range of the AutoID Device or the tag or code has been moved
        /// out of the range during execution.
        /// </summary>
        NO_IDENTIFIER = 8,
        /// <summary>
        /// Multiple tags or codes have been selected, but the command can only
        /// be used with a single tag or code.
        /// </summary>
        MULTIPLE_IDENTIFIERS = 9,
        /// <summary>
        /// The tag or code exists and has a valid format, but there was a
        /// problem reading the data (e.g. still CRC error after maximum number
        /// of retries).
        /// </summary>
        READ_ERROR = 10,
        /// <summary>
        /// The (optical) code or plain text has too many failures and cannot be
        /// detected.
        /// </summary>
        DECODING_ERROR = 11,
        /// <summary>
        /// The code doesnâ€™t match the given target value.
        /// </summary>
        MATCH_ERROR = 12,
        /// <summary>
        /// The code format is not supported by the AutoID Device.
        /// </summary>
        CODE_NOT_SUPPORTED = 13,
        /// <summary>
        /// The tag exists, but there was a problem writing the data.
        /// </summary>
        WRITE_ERROR = 14,
        /// <summary>
        /// The command or a parameter combination is not supported by the
        /// AutoID Device.
        /// </summary>
        NOT_SUPPORTED_BY_DEVICE = 15,
        /// <summary>
        /// The command or a parameter combination is not supported by the tag.
        /// </summary>
        NOT_SUPPORTED_BY_TAG = 16,
        /// <summary>
        /// The AutoID Device is in a state not ready to execute the command.
        /// </summary>
        DEVICE_NOT_READY = 17,
        /// <summary>
        /// The AutoID Device configuration is not valid.
        /// </summary>
        INVALID_CONFIGURATION = 18,
        /// <summary>
        /// This error indicates that there is a general error in the
        /// communication between the transponder and the reader.
        /// </summary>
        RF_COMMUNICATION_ERROR = 19,
        /// <summary>
        /// The AutoID Device has a hardware fault.
        /// </summary>
        DEVICE_FAULT = 20,
        /// <summary>
        /// The battery of the (active) tag is low.
        /// </summary>
        TAG_HAS_LOW_BATTERY = 21,
    }
    
    /// <summary>
    /// The DeviceStatusEnumeration enumeration.
    /// </summary>
    /// <seealso href="https://reference.opcfoundation.org/v104/AutoID/v101/docs/9.2.2" />
    [Workstation.ServiceModel.Ua.DataTypeId("nsu=http://opcfoundation.org/UA/AutoID/;i=3003")]
    public enum DeviceStatusEnumeration
    {
        Idle = 0,
        Error = 1,
        Scanning = 2,
        Busy = 3,
    }
    
    /// <summary>
    /// The LocationTypeEnumeration enumeration.
    /// </summary>
    /// <seealso href="https://reference.opcfoundation.org/v104/AutoID/v101/docs/9.2.3" />
    [Workstation.ServiceModel.Ua.DataTypeId("nsu=http://opcfoundation.org/UA/AutoID/;i=3009")]
    public enum LocationTypeEnumeration
    {
        NMEA = 0,
        LOCAL = 1,
        WGS84 = 2,
        NAME = 3,
    }
    
    /// <summary>
    /// The RfidLockOperationEnumeration enumeration.
    /// </summary>
    /// <seealso href="https://reference.opcfoundation.org/v104/AutoID/v101/docs/9.2.4" />
    [Workstation.ServiceModel.Ua.DataTypeId("nsu=http://opcfoundation.org/UA/AutoID/;i=3016")]
    public enum RfidLockOperationEnumeration
    {
        Lock = 0,
        Unlock = 1,
        PermanentLock = 2,
        PermanentUnlock = 3,
    }
    
    /// <summary>
    /// The RfidLockRegionEnumeration enumeration.
    /// </summary>
    /// <seealso href="https://reference.opcfoundation.org/v104/AutoID/v101/docs/9.2.5" />
    [Workstation.ServiceModel.Ua.DataTypeId("nsu=http://opcfoundation.org/UA/AutoID/;i=3015")]
    public enum RfidLockRegionEnumeration
    {
        Kill = 0,
        Access = 1,
        EPC = 2,
        TID = 3,
        User = 4,
    }
    
    /// <summary>
    /// The RfidPasswordTypeEnumeration enumeration.
    /// </summary>
    /// <seealso href="https://reference.opcfoundation.org/v104/AutoID/v101/docs/9.2.6" />
    [Workstation.ServiceModel.Ua.DataTypeId("nsu=http://opcfoundation.org/UA/AutoID/;i=3014")]
    public enum RfidPasswordTypeEnumeration
    {
        Access = 0,
        Kill = 1,
        Read = 2,
        Write = 3,
    }
    
    /// <summary>
    /// Result values of an AutoID Identifier access.
    /// </summary>
    /// <seealso href="https://reference.opcfoundation.org/v104/AutoID/v101/docs/9.3.17" />
    [Workstation.ServiceModel.Ua.BinaryEncodingId("nsu=http://opcfoundation.org/UA/AutoID/;i=5022")]
    [Workstation.ServiceModel.Ua.XmlEncodingId("nsu=http://opcfoundation.org/UA/AutoID/;i=5023")]
    [Workstation.ServiceModel.Ua.DataTypeId("nsu=http://opcfoundation.org/UA/AutoID/;i=3017")]
    public class AccessResult : Workstation.ServiceModel.Ua.Structure,
            IOptionalFields
    {
        /// <<inheritdoc/>
        public virtual int OptionalFieldCount => 3;
        /// <<inheritdoc/>
        public uint EncodingMask { get; protected set; }
        
        /// <summary>
        /// Defines the format of Identifier as string.
        /// </summary>
        public string CodeType
        {
            get => _codeType;
            set
            {
                uint flag = 1u << 0;
                
                _codeType = value;
                EncodingMask = value is null
                    ? EncodingMask & ~flag
                    : EncodingMask | flag;
            }
        }
        private string _codeType;
        
        /// <summary>
        /// The AutoID Identifier (e.g. a code or a transponder) which was
        /// accessed by a command.
        /// </summary>
        public ScanData Identifier
        {
            get => _identifier;
            set
            {
                uint flag = 1u << 1;
                
                _identifier = value;
                EncodingMask = value is null
                    ? EncodingMask & ~flag
                    : EncodingMask | flag;
            }
        }
        private ScanData _identifier;
        
        /// <summary>
        /// The point of time the AutoID Identifier was accessed by the command.
        /// </summary>
        public System.DateTime? Timestamp
        {
            get => _timestamp;
            set
            {
                uint flag = 1u << 2;
                
                _timestamp = value;
                EncodingMask = value is null
                    ? EncodingMask & ~flag
                    : EncodingMask | flag;
            }
        }
        private System.DateTime? _timestamp;
        
        /// <<inheritdoc/>
        public override void Encode(Workstation.ServiceModel.Ua.IEncoder encoder)
        {
            base.Encode(encoder);
            encoder.PushNamespace("http://opcfoundation.org/UA/AutoID/");
            
            encoder.WriteUInt32("EncodingMask", EncodingMask);
            if (CodeType is {} opt0)
            {
                encoder.WriteString("CodeType", opt0);
            }
            if (Identifier is {} opt1)
            {
                encoder.WriteExtensionObject<ScanData>("Identifier", opt1);
            }
            if (Timestamp is {} opt2)
            {
                encoder.WriteDateTime("Timestamp", opt2);
            }
            
            encoder.PopNamespace();
        }
        
        /// <<inheritdoc/>
        public override void Decode(Workstation.ServiceModel.Ua.IDecoder decoder)
        {
            base.Decode(decoder);
            decoder.PushNamespace("http://opcfoundation.org/UA/AutoID/");
            
            var encodingMask = decoder.ReadUInt32(null);
            EncodingMask = encodingMask;
            
            CodeType = (encodingMask & (1u << 0)) != 0
                ? decoder.ReadString("CodeType")
                : default(string);
            Identifier = (encodingMask & (1u << 1)) != 0
                ? decoder.ReadExtensionObject<ScanData>("Identifier")
                : default(ScanData);
            Timestamp = (encodingMask & (1u << 2)) != 0
                ? decoder.ReadDateTime("Timestamp")
                : default(System.DateTime?);
            
            decoder.PopNamespace();
        }
    }
    
    /// <summary>
    /// Additional result values of an Rfid Transponder access.
    /// </summary>
    /// <seealso href="https://reference.opcfoundation.org/v104/AutoID/v101/docs/9.3.18" />
    [Workstation.ServiceModel.Ua.BinaryEncodingId("nsu=http://opcfoundation.org/UA/AutoID/;i=5024")]
    [Workstation.ServiceModel.Ua.XmlEncodingId("nsu=http://opcfoundation.org/UA/AutoID/;i=5025")]
    [Workstation.ServiceModel.Ua.DataTypeId("nsu=http://opcfoundation.org/UA/AutoID/;i=3018")]
    public class RfidAccessResult : AccessResult
    {
        /// <<inheritdoc/>
        public override int OptionalFieldCount => base.OptionalFieldCount + 7;
        
        /// <summary>
        /// Defines the format of RWData as string.
        /// </summary>
        public string CodeTypeRWData
        {
            get => _codeTypeRWData;
            set
            {
                uint flag = 1u << (0 + base.OptionalFieldCount);
                
                _codeTypeRWData = value;
                EncodingMask = value is null
                    ? EncodingMask & ~flag
                    : EncodingMask | flag;
            }
        }
        private string _codeTypeRWData;
        
        /// <summary>
        /// The user data which was written to / was read from the Rfid
        /// Transponder by the command.
        /// </summary>
        public ScanData RWData
        {
            get => _rWData;
            set
            {
                uint flag = 1u << (1 + base.OptionalFieldCount);
                
                _rWData = value;
                EncodingMask = value is null
                    ? EncodingMask & ~flag
                    : EncodingMask | flag;
            }
        }
        private ScanData _rWData;
        
        /// <summary>
        /// The antenna by which the transponder was accessed by the command.
        /// </summary>
        public int? Antenna
        {
            get => _antenna;
            set
            {
                uint flag = 1u << (2 + base.OptionalFieldCount);
                
                _antenna = value;
                EncodingMask = value is null
                    ? EncodingMask & ~flag
                    : EncodingMask | flag;
            }
        }
        private int? _antenna;
        
        /// <summary>
        /// The power level with which the transponder was accessed by the
        /// command.
        /// </summary>
        public int? CurrentPowerLevel
        {
            get => _currentPowerLevel;
            set
            {
                uint flag = 1u << (3 + base.OptionalFieldCount);
                
                _currentPowerLevel = value;
                EncodingMask = value is null
                    ? EncodingMask & ~flag
                    : EncodingMask | flag;
            }
        }
        private int? _currentPowerLevel;
        
        /// <summary>
        /// The Protocol Control Word of the transponder accessed by the
        /// command.
        /// </summary>
        public ushort? PC
        {
            get => _pC;
            set
            {
                uint flag = 1u << (4 + base.OptionalFieldCount);
                
                _pC = value;
                EncodingMask = value is null
                    ? EncodingMask & ~flag
                    : EncodingMask | flag;
            }
        }
        private ushort? _pC;
        
        /// <summary>
        /// The polarization with which the last transponder was accessed by the
        /// command.
        /// </summary>
        public string Polarization
        {
            get => _polarization;
            set
            {
                uint flag = 1u << (5 + base.OptionalFieldCount);
                
                _polarization = value;
                EncodingMask = value is null
                    ? EncodingMask & ~flag
                    : EncodingMask | flag;
            }
        }
        private string _polarization;
        
        /// <summary>
        /// The Rssi value with which the transponder was accessed by the
        /// command.
        /// </summary>
        public int? Strength
        {
            get => _strength;
            set
            {
                uint flag = 1u << (6 + base.OptionalFieldCount);
                
                _strength = value;
                EncodingMask = value is null
                    ? EncodingMask & ~flag
                    : EncodingMask | flag;
            }
        }
        private int? _strength;
        
        /// <<inheritdoc/>
        public override void Encode(Workstation.ServiceModel.Ua.IEncoder encoder)
        {
            base.Encode(encoder);
            encoder.PushNamespace("http://opcfoundation.org/UA/AutoID/");
            
            if (CodeTypeRWData is {} opt0)
            {
                encoder.WriteString("CodeTypeRWData", opt0);
            }
            if (RWData is {} opt1)
            {
                encoder.WriteExtensionObject<ScanData>("RWData", opt1);
            }
            if (Antenna is {} opt2)
            {
                encoder.WriteInt32("Antenna", opt2);
            }
            if (CurrentPowerLevel is {} opt3)
            {
                encoder.WriteInt32("CurrentPowerLevel", opt3);
            }
            if (PC is {} opt4)
            {
                encoder.WriteUInt16("PC", opt4);
            }
            if (Polarization is {} opt5)
            {
                encoder.WriteString("Polarization", opt5);
            }
            if (Strength is {} opt6)
            {
                encoder.WriteInt32("Strength", opt6);
            }
            
            encoder.PopNamespace();
        }
        
        /// <<inheritdoc/>
        public override void Decode(Workstation.ServiceModel.Ua.IDecoder decoder)
        {
            int offset = base.OptionalFieldCount;
            
            base.Decode(decoder);
            decoder.PushNamespace("http://opcfoundation.org/UA/AutoID/");
            
            var encodingMask = EncodingMask;
            
            CodeTypeRWData = (encodingMask & (1u << (0 + offset))) != 0
                ? decoder.ReadString("CodeTypeRWData")
                : default(string);
            RWData = (encodingMask & (1u << (1 + offset))) != 0
                ? decoder.ReadExtensionObject<ScanData>("RWData")
                : default(ScanData);
            Antenna = (encodingMask & (1u << (2 + offset))) != 0
                ? decoder.ReadInt32("Antenna")
                : default(int?);
            CurrentPowerLevel = (encodingMask & (1u << (3 + offset))) != 0
                ? decoder.ReadInt32("CurrentPowerLevel")
                : default(int?);
            PC = (encodingMask & (1u << (4 + offset))) != 0
                ? decoder.ReadUInt16("PC")
                : default(ushort?);
            Polarization = (encodingMask & (1u << (5 + offset))) != 0
                ? decoder.ReadString("Polarization")
                : default(string);
            Strength = (encodingMask & (1u << (6 + offset))) != 0
                ? decoder.ReadInt32("Strength")
                : default(int?);
            
            decoder.PopNamespace();
        }
    }
    
    /// <summary>
    /// Class for the AntennaNameIdPair data type.
    /// </summary>
    /// <seealso href="https://reference.opcfoundation.org/v104/AutoID/v101/docs/9.3.3" />
    [Workstation.ServiceModel.Ua.BinaryEncodingId("nsu=http://opcfoundation.org/UA/AutoID/;i=5017")]
    [Workstation.ServiceModel.Ua.XmlEncodingId("nsu=http://opcfoundation.org/UA/AutoID/;i=5018")]
    [Workstation.ServiceModel.Ua.DataTypeId("nsu=http://opcfoundation.org/UA/AutoID/;i=3011")]
    public class AntennaNameIdPair : Workstation.ServiceModel.Ua.Structure
    {
        /// <summary>
        /// The AntennaId property.
        /// </summary>
        public int AntennaId { get; set; }
        
        /// <summary>
        /// The AntennaName property.
        /// </summary>
        public string AntennaName { get; set; }
        
        /// <<inheritdoc/>
        public override void Encode(Workstation.ServiceModel.Ua.IEncoder encoder)
        {
            base.Encode(encoder);
            encoder.PushNamespace("http://opcfoundation.org/UA/AutoID/");
            
            encoder.WriteInt32("AntennaId", AntennaId);
            encoder.WriteString("AntennaName", AntennaName);
            
            encoder.PopNamespace();
        }
        
        /// <<inheritdoc/>
        public override void Decode(Workstation.ServiceModel.Ua.IDecoder decoder)
        {
            base.Decode(decoder);
            decoder.PushNamespace("http://opcfoundation.org/UA/AutoID/");
            
            AntennaId = decoder.ReadInt32("AntennaId");
            AntennaName = decoder.ReadString("AntennaName");
            
            decoder.PopNamespace();
        }
    }
    
    /// <summary>
    /// Class for the DhcpGeoConfCoordinate data type.
    /// </summary>
    [Workstation.ServiceModel.Ua.BinaryEncodingId("nsu=http://opcfoundation.org/UA/AutoID/;i=5034")]
    [Workstation.ServiceModel.Ua.XmlEncodingId("nsu=http://opcfoundation.org/UA/AutoID/;i=5035")]
    [Workstation.ServiceModel.Ua.DataTypeId("nsu=http://opcfoundation.org/UA/AutoID/;i=3023")]
    public class DhcpGeoConfCoordinate : Workstation.ServiceModel.Ua.Structure
    {
        /// <summary>
        /// The LaRes property.
        /// </summary>
        public byte LaRes { get; set; }
        
        /// <summary>
        /// The LatitudeInteger property.
        /// </summary>
        public short LatitudeInteger { get; set; }
        
        /// <summary>
        /// The LatitudeFraction property.
        /// </summary>
        public int LatitudeFraction { get; set; }
        
        /// <summary>
        /// The LoRes property.
        /// </summary>
        public byte LoRes { get; set; }
        
        /// <summary>
        /// The LongitudeInteger property.
        /// </summary>
        public short LongitudeInteger { get; set; }
        
        /// <summary>
        /// The LongitudeFraction property.
        /// </summary>
        public int LongitudeFraction { get; set; }
        
        /// <summary>
        /// The AT property.
        /// </summary>
        public byte AT { get; set; }
        
        /// <summary>
        /// The AltRes property.
        /// </summary>
        public byte AltRes { get; set; }
        
        /// <summary>
        /// The AltitudeInteger property.
        /// </summary>
        public int AltitudeInteger { get; set; }
        
        /// <summary>
        /// The AltitudeFraction property.
        /// </summary>
        public short AltitudeFraction { get; set; }
        
        /// <summary>
        /// The Datum property.
        /// </summary>
        public byte Datum { get; set; }
        
        /// <<inheritdoc/>
        public override void Encode(Workstation.ServiceModel.Ua.IEncoder encoder)
        {
            base.Encode(encoder);
            encoder.PushNamespace("http://opcfoundation.org/UA/AutoID/");
            
            encoder.WriteByte("LaRes", LaRes);
            encoder.WriteInt16("LatitudeInteger", LatitudeInteger);
            encoder.WriteInt32("LatitudeFraction", LatitudeFraction);
            encoder.WriteByte("LoRes", LoRes);
            encoder.WriteInt16("LongitudeInteger", LongitudeInteger);
            encoder.WriteInt32("LongitudeFraction", LongitudeFraction);
            encoder.WriteByte("AT", AT);
            encoder.WriteByte("AltRes", AltRes);
            encoder.WriteInt32("AltitudeInteger", AltitudeInteger);
            encoder.WriteInt16("AltitudeFraction", AltitudeFraction);
            encoder.WriteByte("Datum", Datum);
            
            encoder.PopNamespace();
        }
        
        /// <<inheritdoc/>
        public override void Decode(Workstation.ServiceModel.Ua.IDecoder decoder)
        {
            base.Decode(decoder);
            decoder.PushNamespace("http://opcfoundation.org/UA/AutoID/");
            
            LaRes = decoder.ReadByte("LaRes");
            LatitudeInteger = decoder.ReadInt16("LatitudeInteger");
            LatitudeFraction = decoder.ReadInt32("LatitudeFraction");
            LoRes = decoder.ReadByte("LoRes");
            LongitudeInteger = decoder.ReadInt16("LongitudeInteger");
            LongitudeFraction = decoder.ReadInt32("LongitudeFraction");
            AT = decoder.ReadByte("AT");
            AltRes = decoder.ReadByte("AltRes");
            AltitudeInteger = decoder.ReadInt32("AltitudeInteger");
            AltitudeFraction = decoder.ReadInt16("AltitudeFraction");
            Datum = decoder.ReadByte("Datum");
            
            decoder.PopNamespace();
        }
    }
    
    /// <summary>
    /// Class for the LocalCoordinate data type.
    /// </summary>
    /// <seealso href="https://reference.opcfoundation.org/v104/AutoID/v101/docs/9.3.4" />
    [Workstation.ServiceModel.Ua.BinaryEncodingId("nsu=http://opcfoundation.org/UA/AutoID/;i=5028")]
    [Workstation.ServiceModel.Ua.XmlEncodingId("nsu=http://opcfoundation.org/UA/AutoID/;i=5029")]
    [Workstation.ServiceModel.Ua.DataTypeId("nsu=http://opcfoundation.org/UA/AutoID/;i=3019")]
    public class LocalCoordinate : Workstation.ServiceModel.Ua.Structure
    {
        /// <summary>
        /// The X property.
        /// </summary>
        public double X { get; set; }
        
        /// <summary>
        /// The Y property.
        /// </summary>
        public double Y { get; set; }
        
        /// <summary>
        /// The Z property.
        /// </summary>
        public double Z { get; set; }
        
        /// <summary>
        /// Optional
        /// </summary>
        public System.DateTime Timestamp { get; set; }
        
        /// <summary>
        /// Optional
        /// </summary>
        public double DilutionOfPrecision { get; set; }
        
        /// <summary>
        /// Optional
        /// </summary>
        public int UsefulPrecision { get; set; }
        
        /// <<inheritdoc/>
        public override void Encode(Workstation.ServiceModel.Ua.IEncoder encoder)
        {
            base.Encode(encoder);
            encoder.PushNamespace("http://opcfoundation.org/UA/AutoID/");
            
            encoder.WriteDouble("X", X);
            encoder.WriteDouble("Y", Y);
            encoder.WriteDouble("Z", Z);
            encoder.WriteDateTime("Timestamp", Timestamp);
            encoder.WriteDouble("DilutionOfPrecision", DilutionOfPrecision);
            encoder.WriteInt32("UsefulPrecision", UsefulPrecision);
            
            encoder.PopNamespace();
        }
        
        /// <<inheritdoc/>
        public override void Decode(Workstation.ServiceModel.Ua.IDecoder decoder)
        {
            base.Decode(decoder);
            decoder.PushNamespace("http://opcfoundation.org/UA/AutoID/");
            
            X = decoder.ReadDouble("X");
            Y = decoder.ReadDouble("Y");
            Z = decoder.ReadDouble("Z");
            Timestamp = decoder.ReadDateTime("Timestamp");
            DilutionOfPrecision = decoder.ReadDouble("DilutionOfPrecision");
            UsefulPrecision = decoder.ReadInt32("UsefulPrecision");
            
            decoder.PopNamespace();
        }
    }
    
    /// <summary>
    /// Class for the Position data type.
    /// </summary>
    /// <seealso href="https://reference.opcfoundation.org/v104/AutoID/v101/docs/9.3.5" />
    [Workstation.ServiceModel.Ua.BinaryEncodingId("nsu=http://opcfoundation.org/UA/AutoID/;i=5007")]
    [Workstation.ServiceModel.Ua.XmlEncodingId("nsu=http://opcfoundation.org/UA/AutoID/;i=5008")]
    [Workstation.ServiceModel.Ua.DataTypeId("nsu=http://opcfoundation.org/UA/AutoID/;i=3004")]
    public class Position : Workstation.ServiceModel.Ua.Structure
    {
        /// <summary>
        /// The PositionX property.
        /// </summary>
        public int PositionX { get; set; }
        
        /// <summary>
        /// The PositionY property.
        /// </summary>
        public int PositionY { get; set; }
        
        /// <summary>
        /// The SizeX property.
        /// </summary>
        public int SizeX { get; set; }
        
        /// <summary>
        /// The SizeY property.
        /// </summary>
        public int SizeY { get; set; }
        
        /// <summary>
        /// The Rotation property.
        /// </summary>
        public int Rotation { get; set; }
        
        /// <<inheritdoc/>
        public override void Encode(Workstation.ServiceModel.Ua.IEncoder encoder)
        {
            base.Encode(encoder);
            encoder.PushNamespace("http://opcfoundation.org/UA/AutoID/");
            
            encoder.WriteInt32("PositionX", PositionX);
            encoder.WriteInt32("PositionY", PositionY);
            encoder.WriteInt32("SizeX", SizeX);
            encoder.WriteInt32("SizeY", SizeY);
            encoder.WriteInt32("Rotation", Rotation);
            
            encoder.PopNamespace();
        }
        
        /// <<inheritdoc/>
        public override void Decode(Workstation.ServiceModel.Ua.IDecoder decoder)
        {
            base.Decode(decoder);
            decoder.PushNamespace("http://opcfoundation.org/UA/AutoID/");
            
            PositionX = decoder.ReadInt32("PositionX");
            PositionY = decoder.ReadInt32("PositionY");
            SizeX = decoder.ReadInt32("SizeX");
            SizeY = decoder.ReadInt32("SizeY");
            Rotation = decoder.ReadInt32("Rotation");
            
            decoder.PopNamespace();
        }
    }
    
    /// <summary>
    /// Class for the RfidSighting data type.
    /// </summary>
    /// <seealso href="https://reference.opcfoundation.org/v104/AutoID/v101/docs/9.3.13" />
    [Workstation.ServiceModel.Ua.BinaryEncodingId("nsu=http://opcfoundation.org/UA/AutoID/;i=5009")]
    [Workstation.ServiceModel.Ua.XmlEncodingId("nsu=http://opcfoundation.org/UA/AutoID/;i=5010")]
    [Workstation.ServiceModel.Ua.DataTypeId("nsu=http://opcfoundation.org/UA/AutoID/;i=3006")]
    public class RfidSighting : Workstation.ServiceModel.Ua.Structure
    {
        /// <summary>
        /// Returns the number of the antenna which detects the RFID tag first.
        /// </summary>
        public int Antenna { get; set; }
        
        /// <summary>
        /// Returns the signal strength (RSSI) of the transponder. Higher values
        /// indicate a better strength.
        /// </summary>
        public int Strength { get; set; }
        
        /// <summary>
        /// Timestamp in UtcTime
        /// </summary>
        public System.DateTime Timestamp { get; set; }
        
        /// <summary>
        /// Returns the current power level (unit according to parameter
        /// settings).
        /// </summary>
        public int CurrentPowerLevel { get; set; }
        
        /// <<inheritdoc/>
        public override void Encode(Workstation.ServiceModel.Ua.IEncoder encoder)
        {
            base.Encode(encoder);
            encoder.PushNamespace("http://opcfoundation.org/UA/AutoID/");
            
            encoder.WriteInt32("Antenna", Antenna);
            encoder.WriteInt32("Strength", Strength);
            encoder.WriteDateTime("Timestamp", Timestamp);
            encoder.WriteInt32("CurrentPowerLevel", CurrentPowerLevel);
            
            encoder.PopNamespace();
        }
        
        /// <<inheritdoc/>
        public override void Decode(Workstation.ServiceModel.Ua.IDecoder decoder)
        {
            base.Decode(decoder);
            decoder.PushNamespace("http://opcfoundation.org/UA/AutoID/");
            
            Antenna = decoder.ReadInt32("Antenna");
            Strength = decoder.ReadInt32("Strength");
            Timestamp = decoder.ReadDateTime("Timestamp");
            CurrentPowerLevel = decoder.ReadInt32("CurrentPowerLevel");
            
            decoder.PopNamespace();
        }
    }
    
    /// <summary>
    /// Class for the Rotation data type.
    /// </summary>
    /// <seealso href="https://reference.opcfoundation.org/v104/AutoID/v101/docs/9.3.14" />
    [Workstation.ServiceModel.Ua.BinaryEncodingId("nsu=http://opcfoundation.org/UA/AutoID/;i=5050")]
    [Workstation.ServiceModel.Ua.XmlEncodingId("nsu=http://opcfoundation.org/UA/AutoID/;i=5051")]
    [Workstation.ServiceModel.Ua.DataTypeId("nsu=http://opcfoundation.org/UA/AutoID/;i=3029")]
    public class Rotation : Workstation.ServiceModel.Ua.Structure
    {
        /// <summary>
        /// The Yaw property.
        /// </summary>
        public double Yaw { get; set; }
        
        /// <summary>
        /// The Pitch property.
        /// </summary>
        public double Pitch { get; set; }
        
        /// <summary>
        /// The Roll property.
        /// </summary>
        public double Roll { get; set; }
        
        /// <<inheritdoc/>
        public override void Encode(Workstation.ServiceModel.Ua.IEncoder encoder)
        {
            base.Encode(encoder);
            encoder.PushNamespace("http://opcfoundation.org/UA/AutoID/");
            
            encoder.WriteDouble("Yaw", Yaw);
            encoder.WriteDouble("Pitch", Pitch);
            encoder.WriteDouble("Roll", Roll);
            
            encoder.PopNamespace();
        }
        
        /// <<inheritdoc/>
        public override void Decode(Workstation.ServiceModel.Ua.IDecoder decoder)
        {
            base.Decode(decoder);
            decoder.PushNamespace("http://opcfoundation.org/UA/AutoID/");
            
            Yaw = decoder.ReadDouble("Yaw");
            Pitch = decoder.ReadDouble("Pitch");
            Roll = decoder.ReadDouble("Roll");
            
            decoder.PopNamespace();
        }
    }
    
    /// <summary>
    /// Class for the ScanDataEpc data type.
    /// </summary>
    /// <seealso href="https://reference.opcfoundation.org/v104/AutoID/v101/docs/9.3.6" />
    [Workstation.ServiceModel.Ua.BinaryEncodingId("nsu=http://opcfoundation.org/UA/AutoID/;i=5036")]
    [Workstation.ServiceModel.Ua.XmlEncodingId("nsu=http://opcfoundation.org/UA/AutoID/;i=5037")]
    [Workstation.ServiceModel.Ua.DataTypeId("nsu=http://opcfoundation.org/UA/AutoID/;i=3024")]
    public class ScanDataEpc : Workstation.ServiceModel.Ua.Structure
    {
        /// <summary>
        /// The PC property.
        /// </summary>
        public ushort PC { get; set; }
        
        /// <summary>
        /// The UId property.
        /// </summary>
        public byte[] UId { get; set; }
        
        /// <summary>
        /// The XPC_W1 property.
        /// </summary>
        public ushort XPC_W1 { get; set; }
        
        /// <summary>
        /// The XPC_W2 property.
        /// </summary>
        public ushort XPC_W2 { get; set; }
        
        /// <<inheritdoc/>
        public override void Encode(Workstation.ServiceModel.Ua.IEncoder encoder)
        {
            base.Encode(encoder);
            encoder.PushNamespace("http://opcfoundation.org/UA/AutoID/");
            
            encoder.WriteUInt16("PC", PC);
            encoder.WriteByteString("UId", UId);
            encoder.WriteUInt16("XPC_W1", XPC_W1);
            encoder.WriteUInt16("XPC_W2", XPC_W2);
            
            encoder.PopNamespace();
        }
        
        /// <<inheritdoc/>
        public override void Decode(Workstation.ServiceModel.Ua.IDecoder decoder)
        {
            base.Decode(decoder);
            decoder.PushNamespace("http://opcfoundation.org/UA/AutoID/");
            
            PC = decoder.ReadUInt16("PC");
            UId = decoder.ReadByteString("UId");
            XPC_W1 = decoder.ReadUInt16("XPC_W1");
            XPC_W2 = decoder.ReadUInt16("XPC_W2");
            
            decoder.PopNamespace();
        }
    }
    
    /// <summary>
    /// Class for the ScanResult data type.
    /// </summary>
    /// <seealso href="https://reference.opcfoundation.org/v104/AutoID/v101/docs/9.3.8" />
    [Workstation.ServiceModel.Ua.BinaryEncodingId("nsu=http://opcfoundation.org/UA/AutoID/;i=5002")]
    [Workstation.ServiceModel.Ua.XmlEncodingId("nsu=http://opcfoundation.org/UA/AutoID/;i=5003")]
    [Workstation.ServiceModel.Ua.DataTypeId("nsu=http://opcfoundation.org/UA/AutoID/;i=3001")]
    public abstract class ScanResult : Workstation.ServiceModel.Ua.Structure,
            IOptionalFields
    {
        /// <<inheritdoc/>
        public virtual int OptionalFieldCount => 1;
        /// <<inheritdoc/>
        public uint EncodingMask { get; protected set; }
        
        /// <summary>
        /// Defines the format of the ScanData as string.
        /// </summary>
        public string CodeType { get; set; }
        
        /// <summary>
        /// Holds the information about the detected objects e.g. the detected
        /// transponders.
        /// </summary>
        public ScanData ScanData { get; set; }
        
        /// <summary>
        /// Timestamp of the ScanResult creation.
        /// </summary>
        public System.DateTime Timestamp { get; set; }
        
        /// <summary>
        /// Returns the location of the object detection.
        /// </summary>
        public Location Location
        {
            get => _location;
            set
            {
                uint flag = 1u << 0;
                
                _location = value;
                EncodingMask = value is null
                    ? EncodingMask & ~flag
                    : EncodingMask | flag;
            }
        }
        private Location _location;
        
        /// <<inheritdoc/>
        public override void Encode(Workstation.ServiceModel.Ua.IEncoder encoder)
        {
            base.Encode(encoder);
            encoder.PushNamespace("http://opcfoundation.org/UA/AutoID/");
            
            encoder.WriteUInt32("EncodingMask", EncodingMask);
            encoder.WriteString("CodeType", CodeType);
            encoder.WriteExtensionObject<ScanData>("ScanData", ScanData);
            encoder.WriteDateTime("Timestamp", Timestamp);
            if (Location is {} opt0)
            {
                encoder.WriteExtensionObject<Location>("Location", opt0);
            }
            
            encoder.PopNamespace();
        }
        
        /// <<inheritdoc/>
        public override void Decode(Workstation.ServiceModel.Ua.IDecoder decoder)
        {
            base.Decode(decoder);
            decoder.PushNamespace("http://opcfoundation.org/UA/AutoID/");
            
            var encodingMask = decoder.ReadUInt32(null);
            EncodingMask = encodingMask;
            
            CodeType = decoder.ReadString("CodeType");
            ScanData = decoder.ReadExtensionObject<ScanData>("ScanData");
            Timestamp = decoder.ReadDateTime("Timestamp");
            Location = (encodingMask & (1u << 0)) != 0
                ? decoder.ReadExtensionObject<Location>("Location")
                : default(Location);
            
            decoder.PopNamespace();
        }
    }
    
    /// <summary>
    /// Class for the OcrScanResult data type.
    /// </summary>
    /// <seealso href="https://reference.opcfoundation.org/v104/AutoID/v101/docs/9.3.9" />
    [Workstation.ServiceModel.Ua.BinaryEncodingId("nsu=http://opcfoundation.org/UA/AutoID/;i=5004")]
    [Workstation.ServiceModel.Ua.XmlEncodingId("nsu=http://opcfoundation.org/UA/AutoID/;i=5005")]
    [Workstation.ServiceModel.Ua.DataTypeId("nsu=http://opcfoundation.org/UA/AutoID/;i=3002")]
    public class OcrScanResult : ScanResult
    {
        /// <<inheritdoc/>
        public override int OptionalFieldCount => base.OptionalFieldCount + 2;
        
        /// <summary>
        /// NodeId of the original scan image file object used for this scan
        /// result.
        /// </summary>
        public Workstation.ServiceModel.Ua.NodeId ImageId { get; set; }
        
        /// <summary>
        /// Returns the probability of correct decoding.
        /// </summary>
        public byte Quality { get; set; }
        
        /// <summary>
        /// Returns the position of the text within the image.
        /// </summary>
        public Position Position { get; set; }
        
        /// <summary>
        /// Returns the font name used for decoding.
        /// </summary>
        public string Font
        {
            get => _font;
            set
            {
                uint flag = 1u << (0 + base.OptionalFieldCount);
                
                _font = value;
                EncodingMask = value is null
                    ? EncodingMask & ~flag
                    : EncodingMask | flag;
            }
        }
        private string _font;
        
        /// <summary>
        /// Returns the required decoding time.
        /// </summary>
        public System.DateTime? DecodingTime
        {
            get => _decodingTime;
            set
            {
                uint flag = 1u << (1 + base.OptionalFieldCount);
                
                _decodingTime = value;
                EncodingMask = value is null
                    ? EncodingMask & ~flag
                    : EncodingMask | flag;
            }
        }
        private System.DateTime? _decodingTime;
        
        /// <<inheritdoc/>
        public override void Encode(Workstation.ServiceModel.Ua.IEncoder encoder)
        {
            base.Encode(encoder);
            encoder.PushNamespace("http://opcfoundation.org/UA/AutoID/");
            
            encoder.WriteNodeId("ImageId", ImageId);
            encoder.WriteByte("Quality", Quality);
            encoder.WriteExtensionObject<Position>("Position", Position);
            if (Font is {} opt0)
            {
                encoder.WriteString("Font", opt0);
            }
            if (DecodingTime is {} opt1)
            {
                encoder.WriteDateTime("DecodingTime", opt1);
            }
            
            encoder.PopNamespace();
        }
        
        /// <<inheritdoc/>
        public override void Decode(Workstation.ServiceModel.Ua.IDecoder decoder)
        {
            int offset = base.OptionalFieldCount;
            
            base.Decode(decoder);
            decoder.PushNamespace("http://opcfoundation.org/UA/AutoID/");
            
            var encodingMask = EncodingMask;
            
            ImageId = decoder.ReadNodeId("ImageId");
            Quality = decoder.ReadByte("Quality");
            Position = decoder.ReadExtensionObject<Position>("Position");
            Font = (encodingMask & (1u << (0 + offset))) != 0
                ? decoder.ReadString("Font")
                : default(string);
            DecodingTime = (encodingMask & (1u << (1 + offset))) != 0
                ? decoder.ReadDateTime("DecodingTime")
                : default(System.DateTime?);
            
            decoder.PopNamespace();
        }
    }
    
    /// <summary>
    /// Class for the OpticalScanResult data type.
    /// </summary>
    /// <seealso href="https://reference.opcfoundation.org/v104/AutoID/v101/docs/9.3.10" />
    [Workstation.ServiceModel.Ua.BinaryEncodingId("nsu=http://opcfoundation.org/UA/AutoID/;i=5040")]
    [Workstation.ServiceModel.Ua.XmlEncodingId("nsu=http://opcfoundation.org/UA/AutoID/;i=5041")]
    [Workstation.ServiceModel.Ua.DataTypeId("nsu=http://opcfoundation.org/UA/AutoID/;i=3026")]
    public class OpticalScanResult : ScanResult
    {
        /// <<inheritdoc/>
        public override int OptionalFieldCount => base.OptionalFieldCount + 4;
        
        /// <summary>
        /// Returns the quality of the 1D/2D code.
        /// </summary>
        public float? Grade
        {
            get => _grade;
            set
            {
                uint flag = 1u << (0 + base.OptionalFieldCount);
                
                _grade = value;
                EncodingMask = value is null
                    ? EncodingMask & ~flag
                    : EncodingMask | flag;
            }
        }
        private float? _grade;
        
        /// <summary>
        /// Returns the position of the text within the image.
        /// </summary>
        public Position Position
        {
            get => _position;
            set
            {
                uint flag = 1u << (1 + base.OptionalFieldCount);
                
                _position = value;
                EncodingMask = value is null
                    ? EncodingMask & ~flag
                    : EncodingMask | flag;
            }
        }
        private Position _position;
        
        /// <summary>
        /// The Symbology property.
        /// </summary>
        public string Symbology
        {
            get => _symbology;
            set
            {
                uint flag = 1u << (2 + base.OptionalFieldCount);
                
                _symbology = value;
                EncodingMask = value is null
                    ? EncodingMask & ~flag
                    : EncodingMask | flag;
            }
        }
        private string _symbology;
        
        /// <summary>
        /// The ImageId property.
        /// </summary>
        public Workstation.ServiceModel.Ua.NodeId ImageId
        {
            get => _imageId;
            set
            {
                uint flag = 1u << (3 + base.OptionalFieldCount);
                
                _imageId = value;
                EncodingMask = value is null
                    ? EncodingMask & ~flag
                    : EncodingMask | flag;
            }
        }
        private Workstation.ServiceModel.Ua.NodeId _imageId;
        
        /// <<inheritdoc/>
        public override void Encode(Workstation.ServiceModel.Ua.IEncoder encoder)
        {
            base.Encode(encoder);
            encoder.PushNamespace("http://opcfoundation.org/UA/AutoID/");
            
            if (Grade is {} opt0)
            {
                encoder.WriteFloat("Grade", opt0);
            }
            if (Position is {} opt1)
            {
                encoder.WriteExtensionObject<Position>("Position", opt1);
            }
            if (Symbology is {} opt2)
            {
                encoder.WriteString("Symbology", opt2);
            }
            if (ImageId is {} opt3)
            {
                encoder.WriteNodeId("ImageId", opt3);
            }
            
            encoder.PopNamespace();
        }
        
        /// <<inheritdoc/>
        public override void Decode(Workstation.ServiceModel.Ua.IDecoder decoder)
        {
            int offset = base.OptionalFieldCount;
            
            base.Decode(decoder);
            decoder.PushNamespace("http://opcfoundation.org/UA/AutoID/");
            
            var encodingMask = EncodingMask;
            
            Grade = (encodingMask & (1u << (0 + offset))) != 0
                ? decoder.ReadFloat("Grade")
                : default(float?);
            Position = (encodingMask & (1u << (1 + offset))) != 0
                ? decoder.ReadExtensionObject<Position>("Position")
                : default(Position);
            Symbology = (encodingMask & (1u << (2 + offset))) != 0
                ? decoder.ReadString("Symbology")
                : default(string);
            ImageId = (encodingMask & (1u << (3 + offset))) != 0
                ? decoder.ReadNodeId("ImageId")
                : default(Workstation.ServiceModel.Ua.NodeId);
            
            decoder.PopNamespace();
        }
    }
    
    /// <summary>
    /// Class for the OpticalVerifierScanResult data type.
    /// </summary>
    /// <seealso href="https://reference.opcfoundation.org/v104/AutoID/v101/docs/9.3.11" />
    [Workstation.ServiceModel.Ua.BinaryEncodingId("nsu=http://opcfoundation.org/UA/AutoID/;i=5052")]
    [Workstation.ServiceModel.Ua.XmlEncodingId("nsu=http://opcfoundation.org/UA/AutoID/;i=5053")]
    [Workstation.ServiceModel.Ua.DataTypeId("nsu=http://opcfoundation.org/UA/AutoID/;i=3030")]
    public class OpticalVerifierScanResult : OpticalScanResult
    {
        /// <summary>
        /// The IsoGrade property.
        /// </summary>
        public string IsoGrade { get; set; }
        
        /// <summary>
        /// The RMin property.
        /// </summary>
        public short RMin { get; set; }
        
        /// <summary>
        /// The SymbolContrast property.
        /// </summary>
        public short SymbolContrast { get; set; }
        
        /// <summary>
        /// The ECMin property.
        /// </summary>
        public short ECMin { get; set; }
        
        /// <summary>
        /// The Modulation property.
        /// </summary>
        public short Modulation { get; set; }
        
        /// <summary>
        /// The Defects property.
        /// </summary>
        public short Defects { get; set; }
        
        /// <summary>
        /// The Decodability property.
        /// </summary>
        public short Decodability { get; set; }
        
        /// <summary>
        /// The Decode_ property.
        /// </summary>
        public short Decode_ { get; set; }
        
        /// <summary>
        /// The PrintGain property.
        /// </summary>
        public short PrintGain { get; set; }
        
        /// <<inheritdoc/>
        public override void Encode(Workstation.ServiceModel.Ua.IEncoder encoder)
        {
            base.Encode(encoder);
            encoder.PushNamespace("http://opcfoundation.org/UA/AutoID/");
            
            encoder.WriteString("IsoGrade", IsoGrade);
            encoder.WriteInt16("RMin", RMin);
            encoder.WriteInt16("SymbolContrast", SymbolContrast);
            encoder.WriteInt16("ECMin", ECMin);
            encoder.WriteInt16("Modulation", Modulation);
            encoder.WriteInt16("Defects", Defects);
            encoder.WriteInt16("Decodability", Decodability);
            encoder.WriteInt16("Decode_", Decode_);
            encoder.WriteInt16("PrintGain", PrintGain);
            
            encoder.PopNamespace();
        }
        
        /// <<inheritdoc/>
        public override void Decode(Workstation.ServiceModel.Ua.IDecoder decoder)
        {
            base.Decode(decoder);
            decoder.PushNamespace("http://opcfoundation.org/UA/AutoID/");
            
            IsoGrade = decoder.ReadString("IsoGrade");
            RMin = decoder.ReadInt16("RMin");
            SymbolContrast = decoder.ReadInt16("SymbolContrast");
            ECMin = decoder.ReadInt16("ECMin");
            Modulation = decoder.ReadInt16("Modulation");
            Defects = decoder.ReadInt16("Defects");
            Decodability = decoder.ReadInt16("Decodability");
            Decode_ = decoder.ReadInt16("Decode_");
            PrintGain = decoder.ReadInt16("PrintGain");
            
            decoder.PopNamespace();
        }
    }
    
    /// <summary>
    /// Class for the RfidScanResult data type.
    /// </summary>
    /// <seealso href="https://reference.opcfoundation.org/v104/AutoID/v101/docs/9.3.12" />
    [Workstation.ServiceModel.Ua.BinaryEncodingId("nsu=http://opcfoundation.org/UA/AutoID/;i=5011")]
    [Workstation.ServiceModel.Ua.XmlEncodingId("nsu=http://opcfoundation.org/UA/AutoID/;i=5012")]
    [Workstation.ServiceModel.Ua.DataTypeId("nsu=http://opcfoundation.org/UA/AutoID/;i=3007")]
    public class RfidScanResult : ScanResult
    {
        /// <summary>
        /// Returns additional information on the RFID-related properties of the
        /// scan event.
        /// </summary>
        public RfidSighting[] Sighting { get; set; }
        
        /// <<inheritdoc/>
        public override void Encode(Workstation.ServiceModel.Ua.IEncoder encoder)
        {
            base.Encode(encoder);
            encoder.PushNamespace("http://opcfoundation.org/UA/AutoID/");
            
            encoder.WriteExtensionObjectArray<RfidSighting>("Sighting", Sighting);
            
            encoder.PopNamespace();
        }
        
        /// <<inheritdoc/>
        public override void Decode(Workstation.ServiceModel.Ua.IDecoder decoder)
        {
            base.Decode(decoder);
            decoder.PushNamespace("http://opcfoundation.org/UA/AutoID/");
            
            Sighting = decoder.ReadExtensionObjectArray<RfidSighting>("Sighting");
            
            decoder.PopNamespace();
        }
    }
    
    /// <summary>
    /// Class for the RtlsLocationResult data type.
    /// </summary>
    /// <seealso href="https://reference.opcfoundation.org/v104/AutoID/v101/docs/9.3.15" />
    [Workstation.ServiceModel.Ua.BinaryEncodingId("nsu=http://opcfoundation.org/UA/AutoID/;i=5048")]
    [Workstation.ServiceModel.Ua.XmlEncodingId("nsu=http://opcfoundation.org/UA/AutoID/;i=5049")]
    [Workstation.ServiceModel.Ua.DataTypeId("nsu=http://opcfoundation.org/UA/AutoID/;i=3028")]
    public class RtlsLocationResult : ScanResult
    {
        /// <summary>
        /// The Speed property.
        /// </summary>
        public double Speed { get; set; }
        
        /// <summary>
        /// The Heading property.
        /// </summary>
        public double Heading { get; set; }
        
        /// <summary>
        /// The Rotation property.
        /// </summary>
        public Rotation Rotation { get; set; }
        
        /// <summary>
        /// The ReceiveTime property.
        /// </summary>
        public System.DateTime ReceiveTime { get; set; }
        
        /// <<inheritdoc/>
        public override void Encode(Workstation.ServiceModel.Ua.IEncoder encoder)
        {
            base.Encode(encoder);
            encoder.PushNamespace("http://opcfoundation.org/UA/AutoID/");
            
            encoder.WriteDouble("Speed", Speed);
            encoder.WriteDouble("Heading", Heading);
            encoder.WriteExtensionObject<Rotation>("Rotation", Rotation);
            encoder.WriteDateTime("ReceiveTime", ReceiveTime);
            
            encoder.PopNamespace();
        }
        
        /// <<inheritdoc/>
        public override void Decode(Workstation.ServiceModel.Ua.IDecoder decoder)
        {
            base.Decode(decoder);
            decoder.PushNamespace("http://opcfoundation.org/UA/AutoID/");
            
            Speed = decoder.ReadDouble("Speed");
            Heading = decoder.ReadDouble("Heading");
            Rotation = decoder.ReadExtensionObject<Rotation>("Rotation");
            ReceiveTime = decoder.ReadDateTime("ReceiveTime");
            
            decoder.PopNamespace();
        }
    }
    
    /// <summary>
    /// Class for the ScanSettings data type.
    /// </summary>
    /// <seealso href="https://reference.opcfoundation.org/v104/AutoID/v101/docs/9.3.7" />
    [Workstation.ServiceModel.Ua.BinaryEncodingId("nsu=http://opcfoundation.org/UA/AutoID/;i=5015")]
    [Workstation.ServiceModel.Ua.XmlEncodingId("nsu=http://opcfoundation.org/UA/AutoID/;i=5016")]
    [Workstation.ServiceModel.Ua.DataTypeId("nsu=http://opcfoundation.org/UA/AutoID/;i=3010")]
    public class ScanSettings : Workstation.ServiceModel.Ua.Structure,
            IOptionalFields
    {
        /// <<inheritdoc/>
        public virtual int OptionalFieldCount => 1;
        /// <<inheritdoc/>
        public uint EncodingMask { get; protected set; }
        
        /// <summary>
        /// The Duration property.
        /// </summary>
        public double Duration { get; set; }
        
        /// <summary>
        /// The Cycles property.
        /// </summary>
        public int Cycles { get; set; }
        
        /// <summary>
        /// The DataAvailable property.
        /// </summary>
        public bool DataAvailable { get; set; }
        
        /// <summary>
        /// The LocationType property.
        /// </summary>
        public LocationTypeEnumeration? LocationType
        {
            get => _locationType;
            set
            {
                uint flag = 1u << 0;
                
                _locationType = value;
                EncodingMask = value is null
                    ? EncodingMask & ~flag
                    : EncodingMask | flag;
            }
        }
        private LocationTypeEnumeration? _locationType;
        
        /// <<inheritdoc/>
        public override void Encode(Workstation.ServiceModel.Ua.IEncoder encoder)
        {
            base.Encode(encoder);
            encoder.PushNamespace("http://opcfoundation.org/UA/AutoID/");
            
            encoder.WriteUInt32("EncodingMask", EncodingMask);
            encoder.WriteDouble("Duration", Duration);
            encoder.WriteInt32("Cycles", Cycles);
            encoder.WriteBoolean("DataAvailable", DataAvailable);
            if (LocationType is {} opt0)
            {
                encoder.WriteEnumeration<LocationTypeEnumeration>("LocationType", opt0);
            }
            
            encoder.PopNamespace();
        }
        
        /// <<inheritdoc/>
        public override void Decode(Workstation.ServiceModel.Ua.IDecoder decoder)
        {
            base.Decode(decoder);
            decoder.PushNamespace("http://opcfoundation.org/UA/AutoID/");
            
            var encodingMask = decoder.ReadUInt32(null);
            EncodingMask = encodingMask;
            
            Duration = decoder.ReadDouble("Duration");
            Cycles = decoder.ReadInt32("Cycles");
            DataAvailable = decoder.ReadBoolean("DataAvailable");
            LocationType = (encodingMask & (1u << 0)) != 0
                ? decoder.ReadEnumeration<LocationTypeEnumeration>("LocationType")
                : default(LocationTypeEnumeration?);
            
            decoder.PopNamespace();
        }
    }
    
    /// <summary>
    /// Class for the Location data type.
    /// </summary>
    /// <remarks>
    /// This class is an implementation of the union type. That means only one
    /// of its properties is accessible. Which properity is accessible can be
    /// tested by the <see cref="SwitchField" /> property.
    /// </remarks>
    /// <seealso href="https://reference.opcfoundation.org/v104/AutoID/v101/docs/9.4.1" />
    [Workstation.ServiceModel.Ua.BinaryEncodingId("nsu=http://opcfoundation.org/UA/AutoID/;i=5013")]
    [Workstation.ServiceModel.Ua.XmlEncodingId("nsu=http://opcfoundation.org/UA/AutoID/;i=5014")]
    [Workstation.ServiceModel.Ua.DataTypeId("nsu=http://opcfoundation.org/UA/AutoID/;i=3008")]
    public sealed class Location : Workstation.ServiceModel.Ua.Union
    {
        public enum UnionField
        {
            Null = 0,
            NMEA = 1,
            Local = 2,
            WGS84 = 3,
            Name = 4,
        }
        
        private object _field;
        
        public UnionField SwitchField { get; private set; }
        
        /// <summary>
        /// The NMEA property.
        /// </summary>
        /// <remarks>
        /// The value of this property may only be retrieved, when the <see
        /// cref="SwitchField" /> property.is set to <c>UnionField.NMEA</c>.
        /// Otherwise the behavior is undefined and can lead to invalid data or
        /// an <see cref="System.InvalidCastException" /> exeption.
        /// </remarks>
        public string NMEA
        {
            get => (string)_field;
            set
            {
                SwitchField = UnionField.NMEA;
                _field = value;
            }
        }
        
        /// <summary>
        /// The Local property.
        /// </summary>
        /// <remarks>
        /// The value of this property may only be retrieved, when the <see
        /// cref="SwitchField" /> property.is set to <c>UnionField.Local</c>.
        /// Otherwise the behavior is undefined and can lead to invalid data or
        /// an <see cref="System.InvalidCastException" /> exeption.
        /// </remarks>
        public LocalCoordinate Local
        {
            get => (LocalCoordinate)_field;
            set
            {
                SwitchField = UnionField.Local;
                _field = value;
            }
        }
        
        /// <summary>
        /// The WGS84 property.
        /// </summary>
        /// <remarks>
        /// The value of this property may only be retrieved, when the <see
        /// cref="SwitchField" /> property.is set to <c>UnionField.WGS84</c>.
        /// Otherwise the behavior is undefined and can lead to invalid data or
        /// an <see cref="System.InvalidCastException" /> exeption.
        /// </remarks>
        public WGS84Coordinate WGS84
        {
            get => (WGS84Coordinate)_field;
            set
            {
                SwitchField = UnionField.WGS84;
                _field = value;
            }
        }
        
        /// <summary>
        /// The Name property.
        /// </summary>
        /// <remarks>
        /// The value of this property may only be retrieved, when the <see
        /// cref="SwitchField" /> property.is set to <c>UnionField.Name</c>.
        /// Otherwise the behavior is undefined and can lead to invalid data or
        /// an <see cref="System.InvalidCastException" /> exeption.
        /// </remarks>
        public string Name
        {
            get => (string)_field;
            set
            {
                SwitchField = UnionField.Name;
                _field = value;
            }
        }
        
        /// <<inheritdoc/>
        public override void Encode(Workstation.ServiceModel.Ua.IEncoder encoder)
        {
            encoder.PushNamespace("http://opcfoundation.org/UA/AutoID/");
            
            encoder.WriteUInt32("SwitchField", (uint)SwitchField);
            switch (SwitchField)
            {
                case UnionField.Null:
                    break;
                case UnionField.NMEA:
                    encoder.WriteString("NMEA", NMEA);
                    break;
                case UnionField.Local:
                    encoder.WriteExtensionObject<LocalCoordinate>("Local", Local);
                    break;
                case UnionField.WGS84:
                    encoder.WriteExtensionObject<WGS84Coordinate>("WGS84", WGS84);
                    break;
                case UnionField.Name:
                    encoder.WriteString("Name", Name);
                    break;
                default:
                    throw new Workstation.ServiceModel.Ua.ServiceResultException(Workstation.ServiceModel.Ua.StatusCodes.BadEncodingError);
            }
            encoder.PopNamespace();
        }
        
        /// <<inheritdoc/>
        public override void Decode(Workstation.ServiceModel.Ua.IDecoder decoder)
        {
            decoder.PushNamespace("http://opcfoundation.org/UA/AutoID/");
            
            var switchField = (UnionField)decoder.ReadUInt32(null);
            switch (switchField)
            {
                case UnionField.Null:
                    _field = null;
                    break;
                case UnionField.NMEA:
                    NMEA = decoder.ReadString("NMEA");
                    break;
                case UnionField.Local:
                    Local = decoder.ReadExtensionObject<LocalCoordinate>("Local");
                    break;
                case UnionField.WGS84:
                    WGS84 = decoder.ReadExtensionObject<WGS84Coordinate>("WGS84");
                    break;
                case UnionField.Name:
                    Name = decoder.ReadString("Name");
                    break;
                default:
                    throw new Workstation.ServiceModel.Ua.ServiceResultException(Workstation.ServiceModel.Ua.StatusCodes.BadEncodingError);
            }
            decoder.PopNamespace();
        }
    }
    
    /// <summary>
    /// Class for the ScanData data type.
    /// </summary>
    /// <remarks>
    /// This class is an implementation of the union type. That means only one
    /// of its properties is accessible. Which properity is accessible can be
    /// tested by the <see cref="SwitchField" /> property.
    /// </remarks>
    /// <seealso href="https://reference.opcfoundation.org/v104/AutoID/v101/docs/9.4.2" />
    [Workstation.ServiceModel.Ua.BinaryEncodingId("nsu=http://opcfoundation.org/UA/AutoID/;i=5030")]
    [Workstation.ServiceModel.Ua.XmlEncodingId("nsu=http://opcfoundation.org/UA/AutoID/;i=5031")]
    [Workstation.ServiceModel.Ua.DataTypeId("nsu=http://opcfoundation.org/UA/AutoID/;i=3020")]
    public sealed class ScanData : Workstation.ServiceModel.Ua.Union
    {
        public enum UnionField
        {
            Null = 0,
            ByteString = 1,
            String = 2,
            Epc = 3,
            Custom = 4,
        }
        
        private object _field;
        
        public UnionField SwitchField { get; private set; }
        
        /// <summary>
        /// The ByteString property.
        /// </summary>
        /// <remarks>
        /// The value of this property may only be retrieved, when the <see
        /// cref="SwitchField" /> property.is set to
        /// <c>UnionField.ByteString</c>. Otherwise the behavior is undefined
        /// and can lead to invalid data or an <see
        /// cref="System.InvalidCastException" /> exeption.
        /// </remarks>
        public byte[] ByteString
        {
            get => (byte[])_field;
            set
            {
                SwitchField = UnionField.ByteString;
                _field = value;
            }
        }
        
        /// <summary>
        /// The String property.
        /// </summary>
        /// <remarks>
        /// The value of this property may only be retrieved, when the <see
        /// cref="SwitchField" /> property.is set to <c>UnionField.String</c>.
        /// Otherwise the behavior is undefined and can lead to invalid data or
        /// an <see cref="System.InvalidCastException" /> exeption.
        /// </remarks>
        public string String
        {
            get => (string)_field;
            set
            {
                SwitchField = UnionField.String;
                _field = value;
            }
        }
        
        /// <summary>
        /// The Epc property.
        /// </summary>
        /// <remarks>
        /// The value of this property may only be retrieved, when the <see
        /// cref="SwitchField" /> property.is set to <c>UnionField.Epc</c>.
        /// Otherwise the behavior is undefined and can lead to invalid data or
        /// an <see cref="System.InvalidCastException" /> exeption.
        /// </remarks>
        public ScanDataEpc Epc
        {
            get => (ScanDataEpc)_field;
            set
            {
                SwitchField = UnionField.Epc;
                _field = value;
            }
        }
        
        /// <summary>
        /// The Custom property.
        /// </summary>
        /// <remarks>
        /// The value of this property may only be retrieved, when the <see
        /// cref="SwitchField" /> property.is set to <c>UnionField.Custom</c>.
        /// Otherwise the behavior is undefined and can lead to invalid data or
        /// an <see cref="System.InvalidCastException" /> exeption.
        /// </remarks>
        public Workstation.ServiceModel.Ua.Variant Custom
        {
            get => (Workstation.ServiceModel.Ua.Variant)_field;
            set
            {
                SwitchField = UnionField.Custom;
                _field = value;
            }
        }
        
        /// <<inheritdoc/>
        public override void Encode(Workstation.ServiceModel.Ua.IEncoder encoder)
        {
            encoder.PushNamespace("http://opcfoundation.org/UA/AutoID/");
            
            encoder.WriteUInt32("SwitchField", (uint)SwitchField);
            switch (SwitchField)
            {
                case UnionField.Null:
                    break;
                case UnionField.ByteString:
                    encoder.WriteByteString("ByteString", ByteString);
                    break;
                case UnionField.String:
                    encoder.WriteString("String", String);
                    break;
                case UnionField.Epc:
                    encoder.WriteExtensionObject<ScanDataEpc>("Epc", Epc);
                    break;
                case UnionField.Custom:
                    encoder.WriteVariant("Custom", Custom);
                    break;
                default:
                    throw new Workstation.ServiceModel.Ua.ServiceResultException(Workstation.ServiceModel.Ua.StatusCodes.BadEncodingError);
            }
            encoder.PopNamespace();
        }
        
        /// <<inheritdoc/>
        public override void Decode(Workstation.ServiceModel.Ua.IDecoder decoder)
        {
            decoder.PushNamespace("http://opcfoundation.org/UA/AutoID/");
            
            var switchField = (UnionField)decoder.ReadUInt32(null);
            switch (switchField)
            {
                case UnionField.Null:
                    _field = null;
                    break;
                case UnionField.ByteString:
                    ByteString = decoder.ReadByteString("ByteString");
                    break;
                case UnionField.String:
                    String = decoder.ReadString("String");
                    break;
                case UnionField.Epc:
                    Epc = decoder.ReadExtensionObject<ScanDataEpc>("Epc");
                    break;
                case UnionField.Custom:
                    Custom = decoder.ReadVariant("Custom");
                    break;
                default:
                    throw new Workstation.ServiceModel.Ua.ServiceResultException(Workstation.ServiceModel.Ua.StatusCodes.BadEncodingError);
            }
            decoder.PopNamespace();
        }
    }
    
    /// <summary>
    /// Class for the WGS84Coordinate data type.
    /// </summary>
    /// <seealso href="https://reference.opcfoundation.org/v104/AutoID/v101/docs/9.3.16" />
    [Workstation.ServiceModel.Ua.BinaryEncodingId("nsu=http://opcfoundation.org/UA/AutoID/;i=5046")]
    [Workstation.ServiceModel.Ua.XmlEncodingId("nsu=http://opcfoundation.org/UA/AutoID/;i=5047")]
    [Workstation.ServiceModel.Ua.DataTypeId("nsu=http://opcfoundation.org/UA/AutoID/;i=3027")]
    public class WGS84Coordinate : Workstation.ServiceModel.Ua.Structure
    {
        /// <summary>
        /// The N_S_Hemisphere property.
        /// </summary>
        public string N_S_Hemisphere { get; set; }
        
        /// <summary>
        /// The Latitude property.
        /// </summary>
        public double Latitude { get; set; }
        
        /// <summary>
        /// The E_W_Hemisphere property.
        /// </summary>
        public string E_W_Hemisphere { get; set; }
        
        /// <summary>
        /// The Longitude property.
        /// </summary>
        public double Longitude { get; set; }
        
        /// <summary>
        /// The Altitude property.
        /// </summary>
        public double Altitude { get; set; }
        
        /// <summary>
        /// The Timestamp property.
        /// </summary>
        public System.DateTime Timestamp { get; set; }
        
        /// <summary>
        /// The DilutionOfPrecision property.
        /// </summary>
        public double DilutionOfPrecision { get; set; }
        
        /// <summary>
        /// The UsefulPrecisionLatLon property.
        /// </summary>
        public int UsefulPrecisionLatLon { get; set; }
        
        /// <summary>
        /// The UsefulPrecisionAlt property.
        /// </summary>
        public int UsefulPrecisionAlt { get; set; }
        
        /// <<inheritdoc/>
        public override void Encode(Workstation.ServiceModel.Ua.IEncoder encoder)
        {
            base.Encode(encoder);
            encoder.PushNamespace("http://opcfoundation.org/UA/AutoID/");
            
            encoder.WriteString("N_S_Hemisphere", N_S_Hemisphere);
            encoder.WriteDouble("Latitude", Latitude);
            encoder.WriteString("E_W_Hemisphere", E_W_Hemisphere);
            encoder.WriteDouble("Longitude", Longitude);
            encoder.WriteDouble("Altitude", Altitude);
            encoder.WriteDateTime("Timestamp", Timestamp);
            encoder.WriteDouble("DilutionOfPrecision", DilutionOfPrecision);
            encoder.WriteInt32("UsefulPrecisionLatLon", UsefulPrecisionLatLon);
            encoder.WriteInt32("UsefulPrecisionAlt", UsefulPrecisionAlt);
            
            encoder.PopNamespace();
        }
        
        /// <<inheritdoc/>
        public override void Decode(Workstation.ServiceModel.Ua.IDecoder decoder)
        {
            base.Decode(decoder);
            decoder.PushNamespace("http://opcfoundation.org/UA/AutoID/");
            
            N_S_Hemisphere = decoder.ReadString("N_S_Hemisphere");
            Latitude = decoder.ReadDouble("Latitude");
            E_W_Hemisphere = decoder.ReadString("E_W_Hemisphere");
            Longitude = decoder.ReadDouble("Longitude");
            Altitude = decoder.ReadDouble("Altitude");
            Timestamp = decoder.ReadDateTime("Timestamp");
            DilutionOfPrecision = decoder.ReadDouble("DilutionOfPrecision");
            UsefulPrecisionLatLon = decoder.ReadInt32("UsefulPrecisionLatLon");
            UsefulPrecisionAlt = decoder.ReadInt32("UsefulPrecisionAlt");
            
            decoder.PopNamespace();
        }
    }
    
}
