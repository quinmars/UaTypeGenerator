// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated
// </auto-generated>
// ------------------------------------------------------------------------------

namespace Ua.MachineVision
{
    // Ideally this should go into Workstation.UaClient
    public interface IOptionalFields
    {
        int OptionalFieldCount { get; }
        uint EncodingMask { get; }
    }
    
    /// <summary>
    /// The SystemStateDataType enumeration.
    /// </summary>
    /// <seealso href="https://reference.opcfoundation.org/v104/MachineVision/v100/docs/12.21" />
    [Workstation.ServiceModel.Ua.DataTypeId("nsu=http://opcfoundation.org/UA/MachineVision;i=3023")]
    public enum SystemStateDataType
    {
        /// <summary>
        /// Production: The vision system is currently working on a job.
        /// </summary>
        PRD_1 = 1,
        /// <summary>
        /// Stand by: The vision system is ready to accept a command but is
        /// currently not executing a job. It could for example be waiting for
        /// a Start command or a user input.
        /// </summary>
        SBY_2 = 2,
        /// <summary>
        /// Engineering: The vision system is not working and not ready to
        /// accept a command because a user is currently working on the system.
        /// This could be for editing a recipe or changing the system
        /// configuration.
        /// </summary>
        ENG_3 = 3,
        /// <summary>
        /// Scheduled downtime: The vision system is not available for
        /// production and this was planned in advance. This could be for
        /// cleaning, maintenance or calibration works.
        /// </summary>
        SDT_4 = 4,
        /// <summary>
        /// Unscheduled downtime: The vision system is not available for
        /// production due to failure and repair. This covers all kinds of
        /// error states that might occur during operation.
        /// </summary>
        UDT_5 = 5,
        /// <summary>
        /// Nonscheduled time: The vision system is not working because no
        /// production was scheduled. This also covers things like operator
        /// training on the system.
        /// </summary>
        NST_6 = 6,
    }
    
    /// <summary>
    /// The TriStateBooleanDataType enumeration.
    /// </summary>
    /// <seealso href="https://reference.opcfoundation.org/v104/MachineVision/v100/docs/12.3" />
    [Workstation.ServiceModel.Ua.DataTypeId("nsu=http://opcfoundation.org/UA/MachineVision;i=3014")]
    public enum TriStateBooleanDataType
    {
        /// <summary>
        /// The filtering function shall look for entities where the filtered
        /// value is FALSE.
        /// </summary>
        FALSE_0 = 0,
        /// <summary>
        /// The filtering function shall look for entities where the filtered
        /// value is TRUE.
        /// </summary>
        TRUE_1 = 1,
        /// <summary>
        /// The filtering function shall not take the value into account.
        /// </summary>
        DONTCARE_2 = 2,
    }
    
    /// <summary>
    /// Class for the BinaryIdBaseDataType data type.
    /// </summary>
    /// <seealso href="https://reference.opcfoundation.org/v104/MachineVision/v100/docs/12.8" />
    [Workstation.ServiceModel.Ua.BinaryEncodingId("nsu=http://opcfoundation.org/UA/MachineVision;i=5027")]
    [Workstation.ServiceModel.Ua.XmlEncodingId("nsu=http://opcfoundation.org/UA/MachineVision;i=5271")]
    [Workstation.ServiceModel.Ua.DataTypeId("nsu=http://opcfoundation.org/UA/MachineVision;i=3019")]
    public abstract class BinaryIdBaseDataType : Workstation.ServiceModel.Ua.Structure,
            IOptionalFields
    {
        /// <<inheritdoc/>
        public virtual int OptionalFieldCount => 4;
        /// <<inheritdoc/>
        public uint EncodingMask { get; protected set; }
        
        /// <summary>
        /// Id is a system-wide unique name for identifying the recipe.
        /// </summary>
        public string Id { get; set; }
        
        /// <summary>
        /// Represents an optional version number of the identified recipe. It
        /// is recommended to be of the format Major.minor.patch.build or a
        /// subset thereof, but the actual format is implementation defined.
        /// </summary>
        public string Version
        {
            get => _version;
            set
            {
                uint flag = 1u << 0;
                
                _version = value;
                EncodingMask = value is null
                    ? EncodingMask & ~flag
                    : EncodingMask | flag;
            }
        }
        private string _version;
        
        /// <summary>
        /// Represents an optional hash of the binary content of the actual
        /// recipe (as it would be transmitted by the transfer methods). The
        /// hash is supposed to be provided by the environment if existing. The
        /// environment shall use the same hash function on all recipes so that
        /// a difference in the hash indicates a difference in the recipe. It
        /// is recommended to use the SHA-256 algorithm for computing the hash,
        /// however, the actual algorithm is implementation-defined.
        /// </summary>
        public byte[] Hash
        {
            get => _hash;
            set
            {
                uint flag = 1u << 1;
                
                _hash = value;
                EncodingMask = value is null
                    ? EncodingMask & ~flag
                    : EncodingMask | flag;
            }
        }
        private byte[] _hash;
        
        /// <summary>
        /// Name of the hash function used. Required if internally and
        /// externally computed hashes are to be compared.
        /// </summary>
        public string HashAlgorithm
        {
            get => _hashAlgorithm;
            set
            {
                uint flag = 1u << 2;
                
                _hashAlgorithm = value;
                EncodingMask = value is null
                    ? EncodingMask & ~flag
                    : EncodingMask | flag;
            }
        }
        private string _hashAlgorithm;
        
        /// <summary>
        /// Optional short human readable description of the configuration.
        /// </summary>
        public Workstation.ServiceModel.Ua.LocalizedText Description
        {
            get => _description;
            set
            {
                uint flag = 1u << 3;
                
                _description = value;
                EncodingMask = value is null
                    ? EncodingMask & ~flag
                    : EncodingMask | flag;
            }
        }
        private Workstation.ServiceModel.Ua.LocalizedText _description;
        
        /// <<inheritdoc/>
        public override void Encode(Workstation.ServiceModel.Ua.IEncoder encoder)
        {
            base.Encode(encoder);
            encoder.PushNamespace("http://opcfoundation.org/UA/MachineVision");
            
            encoder.WriteUInt32("EncodingMask", EncodingMask);
            encoder.WriteString("Id", Id);
            if (Version is {} opt0)
            {
                encoder.WriteString("Version", opt0);
            }
            if (Hash is {} opt1)
            {
                encoder.WriteByteString("Hash", opt1);
            }
            if (HashAlgorithm is {} opt2)
            {
                encoder.WriteString("HashAlgorithm", opt2);
            }
            if (Description is {} opt3)
            {
                encoder.WriteLocalizedText("Description", opt3);
            }
            
            encoder.PopNamespace();
        }
        
        /// <<inheritdoc/>
        public override void Decode(Workstation.ServiceModel.Ua.IDecoder decoder)
        {
            base.Decode(decoder);
            decoder.PushNamespace("http://opcfoundation.org/UA/MachineVision");
            
            var encodingMask = decoder.ReadUInt32(null);
            EncodingMask = encodingMask;
            
            Id = decoder.ReadString("Id");
            Version = (encodingMask & (1u << 0)) != 0
                ? decoder.ReadString("Version")
                : default(string);
            Hash = (encodingMask & (1u << 1)) != 0
                ? decoder.ReadByteString("Hash")
                : default(byte[]);
            HashAlgorithm = (encodingMask & (1u << 2)) != 0
                ? decoder.ReadString("HashAlgorithm")
                : default(string);
            Description = (encodingMask & (1u << 3)) != 0
                ? decoder.ReadLocalizedText("Description")
                : default(Workstation.ServiceModel.Ua.LocalizedText);
            
            decoder.PopNamespace();
        }
    }
    
    /// <summary>
    /// Class for the ConfigurationIdDataType data type.
    /// </summary>
    /// <seealso href="https://reference.opcfoundation.org/v104/MachineVision/v100/docs/12.13" />
    [Workstation.ServiceModel.Ua.BinaryEncodingId("nsu=http://opcfoundation.org/UA/MachineVision;i=5090")]
    [Workstation.ServiceModel.Ua.XmlEncodingId("nsu=http://opcfoundation.org/UA/MachineVision;i=5091")]
    [Workstation.ServiceModel.Ua.DataTypeId("nsu=http://opcfoundation.org/UA/MachineVision;i=3008")]
    public class ConfigurationIdDataType : BinaryIdBaseDataType
    {
    }
    
    /// <summary>
    /// Class for the RecipeIdExternalDataType data type.
    /// </summary>
    /// <seealso href="https://reference.opcfoundation.org/v104/MachineVision/v100/docs/12.9" />
    [Workstation.ServiceModel.Ua.BinaryEncodingId("nsu=http://opcfoundation.org/UA/MachineVision;i=5002")]
    [Workstation.ServiceModel.Ua.XmlEncodingId("nsu=http://opcfoundation.org/UA/MachineVision;i=5003")]
    [Workstation.ServiceModel.Ua.DataTypeId("nsu=http://opcfoundation.org/UA/MachineVision;i=3002")]
    public class RecipeIdExternalDataType : BinaryIdBaseDataType
    {
    }
    
    /// <summary>
    /// Class for the RecipeIdInternalDataType data type.
    /// </summary>
    /// <seealso href="https://reference.opcfoundation.org/v104/MachineVision/v100/docs/12.10" />
    [Workstation.ServiceModel.Ua.BinaryEncodingId("nsu=http://opcfoundation.org/UA/MachineVision;i=5268")]
    [Workstation.ServiceModel.Ua.XmlEncodingId("nsu=http://opcfoundation.org/UA/MachineVision;i=5269")]
    [Workstation.ServiceModel.Ua.DataTypeId("nsu=http://opcfoundation.org/UA/MachineVision;i=3013")]
    public class RecipeIdInternalDataType : BinaryIdBaseDataType
    {
    }
    
    /// <summary>
    /// Class for the ConfigurationDataType data type.
    /// </summary>
    /// <seealso href="https://reference.opcfoundation.org/v104/MachineVision/v100/docs/12.12" />
    [Workstation.ServiceModel.Ua.BinaryEncodingId("nsu=http://opcfoundation.org/UA/MachineVision;i=5088")]
    [Workstation.ServiceModel.Ua.XmlEncodingId("nsu=http://opcfoundation.org/UA/MachineVision;i=5089")]
    [Workstation.ServiceModel.Ua.DataTypeId("nsu=http://opcfoundation.org/UA/MachineVision;i=3007")]
    public class ConfigurationDataType : Workstation.ServiceModel.Ua.Structure,
            IOptionalFields
    {
        /// <<inheritdoc/>
        public virtual int OptionalFieldCount => 2;
        /// <<inheritdoc/>
        public uint EncodingMask { get; protected set; }
        
        /// <summary>
        /// Indicates that actual content of the configuration may be
        /// transferred through temporary file transfer method.
        /// </summary>
        public bool? HasTransferableDataOnFile
        {
            get => _hasTransferableDataOnFile;
            set
            {
                uint flag = 1u << 0;
                
                _hasTransferableDataOnFile = value;
                EncodingMask = value is null
                    ? EncodingMask & ~flag
                    : EncodingMask | flag;
            }
        }
        private bool? _hasTransferableDataOnFile;
        
        /// <summary>
        /// Identification of the configuration used by the environment. This
        /// argument must not be empty.
        /// </summary>
        public ConfigurationIdDataType ExternalId
        {
            get => _externalId;
            set
            {
                uint flag = 1u << 1;
                
                _externalId = value;
                EncodingMask = value is null
                    ? EncodingMask & ~flag
                    : EncodingMask | flag;
            }
        }
        private ConfigurationIdDataType _externalId;
        
        /// <summary>
        /// System-wide unique ID for identifying a configuration. This ID is
        /// assigned by the vision system.
        /// </summary>
        public ConfigurationIdDataType InternalId { get; set; }
        
        /// <summary>
        /// The time and date when this configuration was last modified.
        /// </summary>
        public System.DateTime LastModified { get; set; }
        
        /// <<inheritdoc/>
        public override void Encode(Workstation.ServiceModel.Ua.IEncoder encoder)
        {
            base.Encode(encoder);
            encoder.PushNamespace("http://opcfoundation.org/UA/MachineVision");
            
            encoder.WriteUInt32("EncodingMask", EncodingMask);
            if (HasTransferableDataOnFile is {} opt0)
            {
                encoder.WriteBoolean("HasTransferableDataOnFile", opt0);
            }
            if (ExternalId is {} opt1)
            {
                encoder.WriteExtensionObject<ConfigurationIdDataType>("ExternalId", opt1);
            }
            encoder.WriteExtensionObject<ConfigurationIdDataType>("InternalId", InternalId);
            encoder.WriteDateTime("LastModified", LastModified);
            
            encoder.PopNamespace();
        }
        
        /// <<inheritdoc/>
        public override void Decode(Workstation.ServiceModel.Ua.IDecoder decoder)
        {
            base.Decode(decoder);
            decoder.PushNamespace("http://opcfoundation.org/UA/MachineVision");
            
            var encodingMask = decoder.ReadUInt32(null);
            EncodingMask = encodingMask;
            
            HasTransferableDataOnFile = (encodingMask & (1u << 0)) != 0
                ? decoder.ReadBoolean("HasTransferableDataOnFile")
                : default(bool?);
            ExternalId = (encodingMask & (1u << 1)) != 0
                ? decoder.ReadExtensionObject<ConfigurationIdDataType>("ExternalId")
                : default(ConfigurationIdDataType);
            InternalId = decoder.ReadExtensionObject<ConfigurationIdDataType>("InternalId");
            LastModified = decoder.ReadDateTime("LastModified");
            
            decoder.PopNamespace();
        }
    }
    
    /// <summary>
    /// Class for the ConfigurationTransferOptions data type.
    /// </summary>
    /// <seealso href="https://reference.opcfoundation.org/v104/MachineVision/v100/docs/12.14" />
    [Workstation.ServiceModel.Ua.BinaryEncodingId("nsu=http://opcfoundation.org/UA/MachineVision;i=5246")]
    [Workstation.ServiceModel.Ua.XmlEncodingId("nsu=http://opcfoundation.org/UA/MachineVision;i=5247")]
    [Workstation.ServiceModel.Ua.DataTypeId("nsu=http://opcfoundation.org/UA/MachineVision;i=3011")]
    public class ConfigurationTransferOptions : Workstation.ServiceModel.Ua.Structure
    {
        /// <summary>
        /// The Id of the configuration to be transferred to or from the client.
        /// </summary>
        public ConfigurationIdDataType InternalId { get; set; }
        
        /// <<inheritdoc/>
        public override void Encode(Workstation.ServiceModel.Ua.IEncoder encoder)
        {
            base.Encode(encoder);
            encoder.PushNamespace("http://opcfoundation.org/UA/MachineVision");
            
            encoder.WriteExtensionObject<ConfigurationIdDataType>("InternalId", InternalId);
            
            encoder.PopNamespace();
        }
        
        /// <<inheritdoc/>
        public override void Decode(Workstation.ServiceModel.Ua.IDecoder decoder)
        {
            base.Decode(decoder);
            decoder.PushNamespace("http://opcfoundation.org/UA/MachineVision");
            
            InternalId = decoder.ReadExtensionObject<ConfigurationIdDataType>("InternalId");
            
            decoder.PopNamespace();
        }
    }
    
    /// <summary>
    /// Class for the JobIdDataType data type.
    /// </summary>
    /// <seealso href="https://reference.opcfoundation.org/v104/MachineVision/v100/docs/12.7" />
    [Workstation.ServiceModel.Ua.BinaryEncodingId("nsu=http://opcfoundation.org/UA/MachineVision;i=5008")]
    [Workstation.ServiceModel.Ua.XmlEncodingId("nsu=http://opcfoundation.org/UA/MachineVision;i=5026")]
    [Workstation.ServiceModel.Ua.DataTypeId("nsu=http://opcfoundation.org/UA/MachineVision;i=3016")]
    public class JobIdDataType : Workstation.ServiceModel.Ua.Structure
    {
        /// <summary>
        /// Id is a system-wide unique identifier/name for identifying the job
        /// carried out.
        /// </summary>
        public string Id { get; set; }
        
        /// <<inheritdoc/>
        public override void Encode(Workstation.ServiceModel.Ua.IEncoder encoder)
        {
            base.Encode(encoder);
            encoder.PushNamespace("http://opcfoundation.org/UA/MachineVision");
            
            encoder.WriteString("Id", Id);
            
            encoder.PopNamespace();
        }
        
        /// <<inheritdoc/>
        public override void Decode(Workstation.ServiceModel.Ua.IDecoder decoder)
        {
            base.Decode(decoder);
            decoder.PushNamespace("http://opcfoundation.org/UA/MachineVision");
            
            Id = decoder.ReadString("Id");
            
            decoder.PopNamespace();
        }
    }
    
    /// <summary>
    /// Class for the MeasIdDataType data type.
    /// </summary>
    /// <seealso href="https://reference.opcfoundation.org/v104/MachineVision/v100/docs/12.5" />
    [Workstation.ServiceModel.Ua.BinaryEncodingId("nsu=http://opcfoundation.org/UA/MachineVision;i=5006")]
    [Workstation.ServiceModel.Ua.XmlEncodingId("nsu=http://opcfoundation.org/UA/MachineVision;i=5007")]
    [Workstation.ServiceModel.Ua.DataTypeId("nsu=http://opcfoundation.org/UA/MachineVision;i=3015")]
    public class MeasIdDataType : Workstation.ServiceModel.Ua.Structure,
            IOptionalFields
    {
        /// <<inheritdoc/>
        public virtual int OptionalFieldCount => 1;
        /// <<inheritdoc/>
        public uint EncodingMask { get; protected set; }
        
        /// <summary>
        /// Id is an identifier/name for identifying the measurement operation.
        /// This identifier is passed by the client to the vision system so no
        /// assumptions can be made about its uniqueness or other properties.
        /// </summary>
        public string Id { get; set; }
        
        /// <summary>
        /// Optional short human readable description of the measurement.
        /// </summary>
        public Workstation.ServiceModel.Ua.LocalizedText Description
        {
            get => _description;
            set
            {
                uint flag = 1u << 0;
                
                _description = value;
                EncodingMask = value is null
                    ? EncodingMask & ~flag
                    : EncodingMask | flag;
            }
        }
        private Workstation.ServiceModel.Ua.LocalizedText _description;
        
        /// <<inheritdoc/>
        public override void Encode(Workstation.ServiceModel.Ua.IEncoder encoder)
        {
            base.Encode(encoder);
            encoder.PushNamespace("http://opcfoundation.org/UA/MachineVision");
            
            encoder.WriteUInt32("EncodingMask", EncodingMask);
            encoder.WriteString("Id", Id);
            if (Description is {} opt0)
            {
                encoder.WriteLocalizedText("Description", opt0);
            }
            
            encoder.PopNamespace();
        }
        
        /// <<inheritdoc/>
        public override void Decode(Workstation.ServiceModel.Ua.IDecoder decoder)
        {
            base.Decode(decoder);
            decoder.PushNamespace("http://opcfoundation.org/UA/MachineVision");
            
            var encodingMask = decoder.ReadUInt32(null);
            EncodingMask = encodingMask;
            
            Id = decoder.ReadString("Id");
            Description = (encodingMask & (1u << 0)) != 0
                ? decoder.ReadLocalizedText("Description")
                : default(Workstation.ServiceModel.Ua.LocalizedText);
            
            decoder.PopNamespace();
        }
    }
    
    /// <summary>
    /// Class for the PartIdDataType data type.
    /// </summary>
    /// <seealso href="https://reference.opcfoundation.org/v104/MachineVision/v100/docs/12.6" />
    [Workstation.ServiceModel.Ua.BinaryEncodingId("nsu=http://opcfoundation.org/UA/MachineVision;i=5013")]
    [Workstation.ServiceModel.Ua.XmlEncodingId("nsu=http://opcfoundation.org/UA/MachineVision;i=5014")]
    [Workstation.ServiceModel.Ua.DataTypeId("nsu=http://opcfoundation.org/UA/MachineVision;i=3004")]
    public class PartIdDataType : Workstation.ServiceModel.Ua.Structure,
            IOptionalFields
    {
        /// <<inheritdoc/>
        public virtual int OptionalFieldCount => 1;
        /// <<inheritdoc/>
        public uint EncodingMask { get; protected set; }
        
        /// <summary>
        /// Describes the connection between a unit under test and a result,
        /// which was created during the processing of a recipe applied on this
        /// unit under test. Usually passed by the client with a Start method
        /// call and not changed by the server.
        /// </summary>
        public string Id { get; set; }
        
        /// <summary>
        /// Optional short human readable description of the part.
        /// </summary>
        public Workstation.ServiceModel.Ua.LocalizedText Description
        {
            get => _description;
            set
            {
                uint flag = 1u << 0;
                
                _description = value;
                EncodingMask = value is null
                    ? EncodingMask & ~flag
                    : EncodingMask | flag;
            }
        }
        private Workstation.ServiceModel.Ua.LocalizedText _description;
        
        /// <<inheritdoc/>
        public override void Encode(Workstation.ServiceModel.Ua.IEncoder encoder)
        {
            base.Encode(encoder);
            encoder.PushNamespace("http://opcfoundation.org/UA/MachineVision");
            
            encoder.WriteUInt32("EncodingMask", EncodingMask);
            encoder.WriteString("Id", Id);
            if (Description is {} opt0)
            {
                encoder.WriteLocalizedText("Description", opt0);
            }
            
            encoder.PopNamespace();
        }
        
        /// <<inheritdoc/>
        public override void Decode(Workstation.ServiceModel.Ua.IDecoder decoder)
        {
            base.Decode(decoder);
            decoder.PushNamespace("http://opcfoundation.org/UA/MachineVision");
            
            var encodingMask = decoder.ReadUInt32(null);
            EncodingMask = encodingMask;
            
            Id = decoder.ReadString("Id");
            Description = (encodingMask & (1u << 0)) != 0
                ? decoder.ReadLocalizedText("Description")
                : default(Workstation.ServiceModel.Ua.LocalizedText);
            
            decoder.PopNamespace();
        }
    }
    
    /// <summary>
    /// Class for the ProcessingTimesDataType data type.
    /// </summary>
    /// <seealso href="https://reference.opcfoundation.org/v104/MachineVision/v100/docs/12.4" />
    [Workstation.ServiceModel.Ua.BinaryEncodingId("nsu=http://opcfoundation.org/UA/MachineVision;i=5016")]
    [Workstation.ServiceModel.Ua.XmlEncodingId("nsu=http://opcfoundation.org/UA/MachineVision;i=5017")]
    [Workstation.ServiceModel.Ua.DataTypeId("nsu=http://opcfoundation.org/UA/MachineVision;i=3005")]
    public class ProcessingTimesDataType : Workstation.ServiceModel.Ua.Structure,
            IOptionalFields
    {
        /// <<inheritdoc/>
        public virtual int OptionalFieldCount => 2;
        /// <<inheritdoc/>
        public uint EncodingMask { get; protected set; }
        
        /// <summary>
        /// Contains the time when the vision system started execution of the
        /// recipe.
        /// </summary>
        public System.DateTime StartTime { get; set; }
        
        /// <summary>
        /// Contains the time when the vision system finished (or
        /// stopped/aborted) execution of the recipe.
        /// </summary>
        public System.DateTime EndTime { get; set; }
        
        /// <summary>
        /// Time spent by the vision system acquiring images.
        /// </summary>
        public double? AcquisitionDuration
        {
            get => _acquisitionDuration;
            set
            {
                uint flag = 1u << 0;
                
                _acquisitionDuration = value;
                EncodingMask = value is null
                    ? EncodingMask & ~flag
                    : EncodingMask | flag;
            }
        }
        private double? _acquisitionDuration;
        
        /// <summary>
        /// Time spent by the vision system processing data.
        /// </summary>
        public double? ProcessingDuration
        {
            get => _processingDuration;
            set
            {
                uint flag = 1u << 1;
                
                _processingDuration = value;
                EncodingMask = value is null
                    ? EncodingMask & ~flag
                    : EncodingMask | flag;
            }
        }
        private double? _processingDuration;
        
        /// <<inheritdoc/>
        public override void Encode(Workstation.ServiceModel.Ua.IEncoder encoder)
        {
            base.Encode(encoder);
            encoder.PushNamespace("http://opcfoundation.org/UA/MachineVision");
            
            encoder.WriteUInt32("EncodingMask", EncodingMask);
            encoder.WriteDateTime("StartTime", StartTime);
            encoder.WriteDateTime("EndTime", EndTime);
            if (AcquisitionDuration is {} opt0)
            {
                encoder.WriteDouble("AcquisitionDuration", opt0);
            }
            if (ProcessingDuration is {} opt1)
            {
                encoder.WriteDouble("ProcessingDuration", opt1);
            }
            
            encoder.PopNamespace();
        }
        
        /// <<inheritdoc/>
        public override void Decode(Workstation.ServiceModel.Ua.IDecoder decoder)
        {
            base.Decode(decoder);
            decoder.PushNamespace("http://opcfoundation.org/UA/MachineVision");
            
            var encodingMask = decoder.ReadUInt32(null);
            EncodingMask = encodingMask;
            
            StartTime = decoder.ReadDateTime("StartTime");
            EndTime = decoder.ReadDateTime("EndTime");
            AcquisitionDuration = (encodingMask & (1u << 0)) != 0
                ? decoder.ReadDouble("AcquisitionDuration")
                : default(double?);
            ProcessingDuration = (encodingMask & (1u << 1)) != 0
                ? decoder.ReadDouble("ProcessingDuration")
                : default(double?);
            
            decoder.PopNamespace();
        }
    }
    
    /// <summary>
    /// Class for the ProductDataType data type.
    /// </summary>
    /// <seealso href="https://reference.opcfoundation.org/v104/MachineVision/v100/docs/12.15" />
    [Workstation.ServiceModel.Ua.BinaryEncodingId("nsu=http://opcfoundation.org/UA/MachineVision;i=5272")]
    [Workstation.ServiceModel.Ua.XmlEncodingId("nsu=http://opcfoundation.org/UA/MachineVision;i=5273")]
    [Workstation.ServiceModel.Ua.DataTypeId("nsu=http://opcfoundation.org/UA/MachineVision;i=3020")]
    public class ProductDataType : Workstation.ServiceModel.Ua.Structure
    {
        /// <summary>
        /// Identification of the product used by the environment. This argument
        /// must not be empty.
        /// </summary>
        public ProductIdDataType ExternalId { get; set; }
        
        /// <<inheritdoc/>
        public override void Encode(Workstation.ServiceModel.Ua.IEncoder encoder)
        {
            base.Encode(encoder);
            encoder.PushNamespace("http://opcfoundation.org/UA/MachineVision");
            
            encoder.WriteExtensionObject<ProductIdDataType>("ExternalId", ExternalId);
            
            encoder.PopNamespace();
        }
        
        /// <<inheritdoc/>
        public override void Decode(Workstation.ServiceModel.Ua.IDecoder decoder)
        {
            base.Decode(decoder);
            decoder.PushNamespace("http://opcfoundation.org/UA/MachineVision");
            
            ExternalId = decoder.ReadExtensionObject<ProductIdDataType>("ExternalId");
            
            decoder.PopNamespace();
        }
    }
    
    /// <summary>
    /// Class for the ProductIdDataType data type.
    /// </summary>
    /// <seealso href="https://reference.opcfoundation.org/v104/MachineVision/v100/docs/12.16" />
    [Workstation.ServiceModel.Ua.BinaryEncodingId("nsu=http://opcfoundation.org/UA/MachineVision;i=5224")]
    [Workstation.ServiceModel.Ua.XmlEncodingId("nsu=http://opcfoundation.org/UA/MachineVision;i=5225")]
    [Workstation.ServiceModel.Ua.DataTypeId("nsu=http://opcfoundation.org/UA/MachineVision;i=3003")]
    public class ProductIdDataType : Workstation.ServiceModel.Ua.Structure,
            IOptionalFields
    {
        /// <<inheritdoc/>
        public virtual int OptionalFieldCount => 1;
        /// <<inheritdoc/>
        public uint EncodingMask { get; protected set; }
        
        /// <summary>
        /// Id is a system-wide unique identifier/name for identifying the
        /// product.
        /// </summary>
        public string Id { get; set; }
        
        /// <summary>
        /// Optional short human readable description of the configuration
        /// </summary>
        public Workstation.ServiceModel.Ua.LocalizedText Description
        {
            get => _description;
            set
            {
                uint flag = 1u << 0;
                
                _description = value;
                EncodingMask = value is null
                    ? EncodingMask & ~flag
                    : EncodingMask | flag;
            }
        }
        private Workstation.ServiceModel.Ua.LocalizedText _description;
        
        /// <<inheritdoc/>
        public override void Encode(Workstation.ServiceModel.Ua.IEncoder encoder)
        {
            base.Encode(encoder);
            encoder.PushNamespace("http://opcfoundation.org/UA/MachineVision");
            
            encoder.WriteUInt32("EncodingMask", EncodingMask);
            encoder.WriteString("Id", Id);
            if (Description is {} opt0)
            {
                encoder.WriteLocalizedText("Description", opt0);
            }
            
            encoder.PopNamespace();
        }
        
        /// <<inheritdoc/>
        public override void Decode(Workstation.ServiceModel.Ua.IDecoder decoder)
        {
            base.Decode(decoder);
            decoder.PushNamespace("http://opcfoundation.org/UA/MachineVision");
            
            var encodingMask = decoder.ReadUInt32(null);
            EncodingMask = encodingMask;
            
            Id = decoder.ReadString("Id");
            Description = (encodingMask & (1u << 0)) != 0
                ? decoder.ReadLocalizedText("Description")
                : default(Workstation.ServiceModel.Ua.LocalizedText);
            
            decoder.PopNamespace();
        }
    }
    
    /// <summary>
    /// Class for the RecipeTransferOptions data type.
    /// </summary>
    /// <seealso href="https://reference.opcfoundation.org/v104/MachineVision/v100/docs/12.11" />
    [Workstation.ServiceModel.Ua.BinaryEncodingId("nsu=http://opcfoundation.org/UA/MachineVision;i=5248")]
    [Workstation.ServiceModel.Ua.XmlEncodingId("nsu=http://opcfoundation.org/UA/MachineVision;i=5249")]
    [Workstation.ServiceModel.Ua.DataTypeId("nsu=http://opcfoundation.org/UA/MachineVision;i=3012")]
    public class RecipeTransferOptions : Workstation.ServiceModel.Ua.Structure
    {
        /// <summary>
        /// The InternalId of the recipe to be transferred to or from the
        /// client.
        /// </summary>
        public RecipeIdInternalDataType InternalId { get; set; }
        
        /// <<inheritdoc/>
        public override void Encode(Workstation.ServiceModel.Ua.IEncoder encoder)
        {
            base.Encode(encoder);
            encoder.PushNamespace("http://opcfoundation.org/UA/MachineVision");
            
            encoder.WriteExtensionObject<RecipeIdInternalDataType>("InternalId", InternalId);
            
            encoder.PopNamespace();
        }
        
        /// <<inheritdoc/>
        public override void Decode(Workstation.ServiceModel.Ua.IDecoder decoder)
        {
            base.Decode(decoder);
            decoder.PushNamespace("http://opcfoundation.org/UA/MachineVision");
            
            InternalId = decoder.ReadExtensionObject<RecipeIdInternalDataType>("InternalId");
            
            decoder.PopNamespace();
        }
    }
    
    /// <summary>
    /// Class for the ResultDataType data type.
    /// </summary>
    /// <seealso href="https://reference.opcfoundation.org/v104/MachineVision/v100/docs/12.17" />
    [Workstation.ServiceModel.Ua.BinaryEncodingId("nsu=http://opcfoundation.org/UA/MachineVision;i=5018")]
    [Workstation.ServiceModel.Ua.XmlEncodingId("nsu=http://opcfoundation.org/UA/MachineVision;i=5019")]
    [Workstation.ServiceModel.Ua.DataTypeId("nsu=http://opcfoundation.org/UA/MachineVision;i=3006")]
    public class ResultDataType : Workstation.ServiceModel.Ua.Structure,
            IOptionalFields
    {
        /// <<inheritdoc/>
        public virtual int OptionalFieldCount => 9;
        /// <<inheritdoc/>
        public uint EncodingMask { get; protected set; }
        
        /// <summary>
        /// System-wide unique identifier, which is assigned by the system. This
        /// ID can be used for fetching exactly this result using the pertinent
        /// result management methods and it is identical to the ResultId of
        /// the ResultReadyEventType.
        /// </summary>
        public ResultIdDataType ResultId { get; set; }
        
        /// <summary>
        /// Indicates that additional data for this result can be retrieved by
        /// temporary file transfer.
        /// </summary>
        public bool? HasTransferableDataOnFile
        {
            get => _hasTransferableDataOnFile;
            set
            {
                uint flag = 1u << 0;
                
                _hasTransferableDataOnFile = value;
                EncodingMask = value is null
                    ? EncodingMask & ~flag
                    : EncodingMask | flag;
            }
        }
        private bool? _hasTransferableDataOnFile;
        
        /// <summary>
        /// Indicates whether the result is the partial result of a total
        /// result.
        /// </summary>
        public bool IsPartial { get; set; }
        
        /// <summary>
        /// Indicates whether the system was in simulation mode when the result
        /// was created.
        /// </summary>
        public bool? IsSimulated
        {
            get => _isSimulated;
            set
            {
                uint flag = 1u << 1;
                
                _isSimulated = value;
                EncodingMask = value is null
                    ? EncodingMask & ~flag
                    : EncodingMask | flag;
            }
        }
        private bool? _isSimulated;
        
        /// <summary>
        /// ResultState provides information about the current state of a result
        /// and the ResultStateDataType is defined in Section 12.18.
        /// </summary>
        public int ResultState { get; set; }
        
        /// <summary>
        /// This identifier is given by the client when starting a single job or
        /// continuous execution and transmitted to the vision system. It is
        /// used to identify the respective result data generated for this job.
        /// Although the system-wide unique JobId would be sufficient to
        /// identify the job which the result belongs to, this makes for easier
        /// filtering on the part of the client without keeping track of
        /// JobIds.
        /// </summary>
        public MeasIdDataType MeasId
        {
            get => _measId;
            set
            {
                uint flag = 1u << 2;
                
                _measId = value;
                EncodingMask = value is null
                    ? EncodingMask & ~flag
                    : EncodingMask | flag;
            }
        }
        private MeasIdDataType _measId;
        
        /// <summary>
        /// A PartId is given by the client when starting the job; although the
        /// system-wide unique JobId would be sufficient to identify the job
        /// which the result belongs to, this makes for easier filtering on the
        /// part of the client without keeping track of JobIds.
        /// </summary>
        public PartIdDataType PartId
        {
            get => _partId;
            set
            {
                uint flag = 1u << 3;
                
                _partId = value;
                EncodingMask = value is null
                    ? EncodingMask & ~flag
                    : EncodingMask | flag;
            }
        }
        private PartIdDataType _partId;
        
        /// <summary>
        /// External Id of the recipe in use which produced the result. The
        /// ExternalID is only managed by the environment.
        /// </summary>
        public RecipeIdExternalDataType ExternalRecipeId
        {
            get => _externalRecipeId;
            set
            {
                uint flag = 1u << 4;
                
                _externalRecipeId = value;
                EncodingMask = value is null
                    ? EncodingMask & ~flag
                    : EncodingMask | flag;
            }
        }
        private RecipeIdExternalDataType _externalRecipeId;
        
        /// <summary>
        /// Internal Id of the recipe in use which produced the result. This ID
        /// is system-wide unique and is assigned by the vision system.
        /// </summary>
        public RecipeIdInternalDataType InternalRecipeId { get; set; }
        
        /// <summary>
        /// productId which was used to trigger the job which created the
        /// result.
        /// </summary>
        public ProductIdDataType ProductId
        {
            get => _productId;
            set
            {
                uint flag = 1u << 5;
                
                _productId = value;
                EncodingMask = value is null
                    ? EncodingMask & ~flag
                    : EncodingMask | flag;
            }
        }
        private ProductIdDataType _productId;
        
        /// <summary>
        /// External Id of the configuration in use which produced the result.
        /// The ExternalID is only managed by the environment.
        /// </summary>
        public ConfigurationIdDataType ExternalConfigurationId
        {
            get => _externalConfigurationId;
            set
            {
                uint flag = 1u << 6;
                
                _externalConfigurationId = value;
                EncodingMask = value is null
                    ? EncodingMask & ~flag
                    : EncodingMask | flag;
            }
        }
        private ConfigurationIdDataType _externalConfigurationId;
        
        /// <summary>
        /// Internal Id of the configuration in use which produced the result.
        /// This ID is system-wide unique and is assigned by the vision system.
        /// </summary>
        public ConfigurationIdDataType InternalConfigurationId { get; set; }
        
        /// <summary>
        /// The ID of the job, created by the transition from state Ready to
        /// state SingleExecution or to state ContinuousExecution which
        /// produced the result.
        /// </summary>
        public JobIdDataType JobId { get; set; }
        
        /// <summary>
        /// CreationTime indicates the time when the result was created.
        /// </summary>
        public System.DateTime CreationTime { get; set; }
        
        /// <summary>
        /// Collection of different processing times that were needed to create
        /// the result.
        /// </summary>
        public ProcessingTimesDataType ProcessingTimes
        {
            get => _processingTimes;
            set
            {
                uint flag = 1u << 7;
                
                _processingTimes = value;
                EncodingMask = value is null
                    ? EncodingMask & ~flag
                    : EncodingMask | flag;
            }
        }
        private ProcessingTimesDataType _processingTimes;
        
        /// <summary>
        /// Abstract data type to be subtyped from to hold result data created
        /// by the selected recipe.
        /// </summary>
        public Workstation.ServiceModel.Ua.Variant[] ResultContent
        {
            get => _resultContent;
            set
            {
                uint flag = 1u << 8;
                
                _resultContent = value;
                EncodingMask = value is null
                    ? EncodingMask & ~flag
                    : EncodingMask | flag;
            }
        }
        private Workstation.ServiceModel.Ua.Variant[] _resultContent;
        
        /// <<inheritdoc/>
        public override void Encode(Workstation.ServiceModel.Ua.IEncoder encoder)
        {
            base.Encode(encoder);
            encoder.PushNamespace("http://opcfoundation.org/UA/MachineVision");
            
            encoder.WriteUInt32("EncodingMask", EncodingMask);
            encoder.WriteExtensionObject<ResultIdDataType>("ResultId", ResultId);
            if (HasTransferableDataOnFile is {} opt0)
            {
                encoder.WriteBoolean("HasTransferableDataOnFile", opt0);
            }
            encoder.WriteBoolean("IsPartial", IsPartial);
            if (IsSimulated is {} opt1)
            {
                encoder.WriteBoolean("IsSimulated", opt1);
            }
            encoder.WriteInt32("ResultState", ResultState);
            if (MeasId is {} opt2)
            {
                encoder.WriteExtensionObject<MeasIdDataType>("MeasId", opt2);
            }
            if (PartId is {} opt3)
            {
                encoder.WriteExtensionObject<PartIdDataType>("PartId", opt3);
            }
            if (ExternalRecipeId is {} opt4)
            {
                encoder.WriteExtensionObject<RecipeIdExternalDataType>("ExternalRecipeId", opt4);
            }
            encoder.WriteExtensionObject<RecipeIdInternalDataType>("InternalRecipeId", InternalRecipeId);
            if (ProductId is {} opt5)
            {
                encoder.WriteExtensionObject<ProductIdDataType>("ProductId", opt5);
            }
            if (ExternalConfigurationId is {} opt6)
            {
                encoder.WriteExtensionObject<ConfigurationIdDataType>("ExternalConfigurationId", opt6);
            }
            encoder.WriteExtensionObject<ConfigurationIdDataType>("InternalConfigurationId", InternalConfigurationId);
            encoder.WriteExtensionObject<JobIdDataType>("JobId", JobId);
            encoder.WriteDateTime("CreationTime", CreationTime);
            if (ProcessingTimes is {} opt7)
            {
                encoder.WriteExtensionObject<ProcessingTimesDataType>("ProcessingTimes", opt7);
            }
            if (ResultContent is {} opt8)
            {
                encoder.WriteVariantArray("ResultContent", opt8);
            }
            
            encoder.PopNamespace();
        }
        
        /// <<inheritdoc/>
        public override void Decode(Workstation.ServiceModel.Ua.IDecoder decoder)
        {
            base.Decode(decoder);
            decoder.PushNamespace("http://opcfoundation.org/UA/MachineVision");
            
            var encodingMask = decoder.ReadUInt32(null);
            EncodingMask = encodingMask;
            
            ResultId = decoder.ReadExtensionObject<ResultIdDataType>("ResultId");
            HasTransferableDataOnFile = (encodingMask & (1u << 0)) != 0
                ? decoder.ReadBoolean("HasTransferableDataOnFile")
                : default(bool?);
            IsPartial = decoder.ReadBoolean("IsPartial");
            IsSimulated = (encodingMask & (1u << 1)) != 0
                ? decoder.ReadBoolean("IsSimulated")
                : default(bool?);
            ResultState = decoder.ReadInt32("ResultState");
            MeasId = (encodingMask & (1u << 2)) != 0
                ? decoder.ReadExtensionObject<MeasIdDataType>("MeasId")
                : default(MeasIdDataType);
            PartId = (encodingMask & (1u << 3)) != 0
                ? decoder.ReadExtensionObject<PartIdDataType>("PartId")
                : default(PartIdDataType);
            ExternalRecipeId = (encodingMask & (1u << 4)) != 0
                ? decoder.ReadExtensionObject<RecipeIdExternalDataType>("ExternalRecipeId")
                : default(RecipeIdExternalDataType);
            InternalRecipeId = decoder.ReadExtensionObject<RecipeIdInternalDataType>("InternalRecipeId");
            ProductId = (encodingMask & (1u << 5)) != 0
                ? decoder.ReadExtensionObject<ProductIdDataType>("ProductId")
                : default(ProductIdDataType);
            ExternalConfigurationId = (encodingMask & (1u << 6)) != 0
                ? decoder.ReadExtensionObject<ConfigurationIdDataType>("ExternalConfigurationId")
                : default(ConfigurationIdDataType);
            InternalConfigurationId = decoder.ReadExtensionObject<ConfigurationIdDataType>("InternalConfigurationId");
            JobId = decoder.ReadExtensionObject<JobIdDataType>("JobId");
            CreationTime = decoder.ReadDateTime("CreationTime");
            ProcessingTimes = (encodingMask & (1u << 7)) != 0
                ? decoder.ReadExtensionObject<ProcessingTimesDataType>("ProcessingTimes")
                : default(ProcessingTimesDataType);
            ResultContent = (encodingMask & (1u << 8)) != 0
                ? decoder.ReadVariantArray("ResultContent")
                : default(Workstation.ServiceModel.Ua.Variant[]);
            
            decoder.PopNamespace();
        }
    }
    
    /// <summary>
    /// Class for the ResultIdDataType data type.
    /// </summary>
    /// <seealso href="https://reference.opcfoundation.org/v104/MachineVision/v100/docs/12.18" />
    [Workstation.ServiceModel.Ua.BinaryEncodingId("nsu=http://opcfoundation.org/UA/MachineVision;i=5274")]
    [Workstation.ServiceModel.Ua.XmlEncodingId("nsu=http://opcfoundation.org/UA/MachineVision;i=5275")]
    [Workstation.ServiceModel.Ua.DataTypeId("nsu=http://opcfoundation.org/UA/MachineVision;i=3021")]
    public class ResultIdDataType : Workstation.ServiceModel.Ua.Structure
    {
        /// <summary>
        /// Id is a system-wide unique identifier/name for identifying the
        /// generated result.
        /// </summary>
        public string Id { get; set; }
        
        /// <<inheritdoc/>
        public override void Encode(Workstation.ServiceModel.Ua.IEncoder encoder)
        {
            base.Encode(encoder);
            encoder.PushNamespace("http://opcfoundation.org/UA/MachineVision");
            
            encoder.WriteString("Id", Id);
            
            encoder.PopNamespace();
        }
        
        /// <<inheritdoc/>
        public override void Decode(Workstation.ServiceModel.Ua.IDecoder decoder)
        {
            base.Decode(decoder);
            decoder.PushNamespace("http://opcfoundation.org/UA/MachineVision");
            
            Id = decoder.ReadString("Id");
            
            decoder.PopNamespace();
        }
    }
    
    /// <summary>
    /// Class for the ResultTransferOptions data type.
    /// </summary>
    /// <seealso href="https://reference.opcfoundation.org/v104/MachineVision/v100/docs/12.20" />
    [Workstation.ServiceModel.Ua.BinaryEncodingId("nsu=http://opcfoundation.org/UA/MachineVision;i=5276")]
    [Workstation.ServiceModel.Ua.XmlEncodingId("nsu=http://opcfoundation.org/UA/MachineVision;i=5277")]
    [Workstation.ServiceModel.Ua.DataTypeId("nsu=http://opcfoundation.org/UA/MachineVision;i=3022")]
    public class ResultTransferOptions : Workstation.ServiceModel.Ua.Structure
    {
        /// <summary>
        /// The Id of the result to be transferred to the client.
        /// </summary>
        public ResultIdDataType Id { get; set; }
        
        /// <<inheritdoc/>
        public override void Encode(Workstation.ServiceModel.Ua.IEncoder encoder)
        {
            base.Encode(encoder);
            encoder.PushNamespace("http://opcfoundation.org/UA/MachineVision");
            
            encoder.WriteExtensionObject<ResultIdDataType>("Id", Id);
            
            encoder.PopNamespace();
        }
        
        /// <<inheritdoc/>
        public override void Decode(Workstation.ServiceModel.Ua.IDecoder decoder)
        {
            base.Decode(decoder);
            decoder.PushNamespace("http://opcfoundation.org/UA/MachineVision");
            
            Id = decoder.ReadExtensionObject<ResultIdDataType>("Id");
            
            decoder.PopNamespace();
        }
    }
    
    /// <summary>
    /// Class for the SystemStateDescriptionDataType data type.
    /// </summary>
    /// <seealso href="https://reference.opcfoundation.org/v104/MachineVision/v100/docs/12.22" />
    [Workstation.ServiceModel.Ua.BinaryEncodingId("nsu=http://opcfoundation.org/UA/MachineVision;i=5278")]
    [Workstation.ServiceModel.Ua.XmlEncodingId("nsu=http://opcfoundation.org/UA/MachineVision;i=5279")]
    [Workstation.ServiceModel.Ua.DataTypeId("nsu=http://opcfoundation.org/UA/MachineVision;i=3024")]
    public class SystemStateDescriptionDataType : Workstation.ServiceModel.Ua.Structure,
            IOptionalFields
    {
        /// <<inheritdoc/>
        public virtual int OptionalFieldCount => 1;
        /// <<inheritdoc/>
        public uint EncodingMask { get; protected set; }
        
        /// <summary>
        /// Denotes one of the basic SEMI E10 states
        /// </summary>
        public SystemStateDataType State { get; set; }
        
        /// <summary>
        /// Optional string describing the full state path, starting with the
        /// SEMI E10 state denoted by the state member; the string format is
        /// described in Section 11.5.
        /// </summary>
        public string StateDescription
        {
            get => _stateDescription;
            set
            {
                uint flag = 1u << 0;
                
                _stateDescription = value;
                EncodingMask = value is null
                    ? EncodingMask & ~flag
                    : EncodingMask | flag;
            }
        }
        private string _stateDescription;
        
        /// <<inheritdoc/>
        public override void Encode(Workstation.ServiceModel.Ua.IEncoder encoder)
        {
            base.Encode(encoder);
            encoder.PushNamespace("http://opcfoundation.org/UA/MachineVision");
            
            encoder.WriteUInt32("EncodingMask", EncodingMask);
            encoder.WriteEnumeration<SystemStateDataType>("State", State);
            if (StateDescription is {} opt0)
            {
                encoder.WriteString("StateDescription", opt0);
            }
            
            encoder.PopNamespace();
        }
        
        /// <<inheritdoc/>
        public override void Decode(Workstation.ServiceModel.Ua.IDecoder decoder)
        {
            base.Decode(decoder);
            decoder.PushNamespace("http://opcfoundation.org/UA/MachineVision");
            
            var encodingMask = decoder.ReadUInt32(null);
            EncodingMask = encodingMask;
            
            State = decoder.ReadEnumeration<SystemStateDataType>("State");
            StateDescription = (encodingMask & (1u << 0)) != 0
                ? decoder.ReadString("StateDescription")
                : default(string);
            
            decoder.PopNamespace();
        }
    }
    
}
